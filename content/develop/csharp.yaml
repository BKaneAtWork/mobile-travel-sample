requirements: |
chapters:
  - title: Installation
    lessons:
      - title: Overview
        milestones:
          - title: Components
            description: |
              This is the high level architecture of the system that we will be running
              ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/master/content/assets/travelsampleapp-arch.png)

              It includes the following components -
              - **Client Side **
                - Travel Mobile App -  A Xamarin Forms app (iOS, Android, UWP) that is linked with Couchbase Lite 2.0 (Developer Preview)
              - **Server Side **
                - Couchbase Server v5.0
                - Sync Gateway v1.5
                - Travel Web App - Python web app integrated with Couchbase Python SDK

              For the Develop portion of the workshop, you will be developing, building and testing the Travel Mobile App on your local machine. 
              
              For the server side components, you have three options 
              - **Manual**: Here, you would download and install the components on your local machine.
              - **Docker (Local)**: In this case, you would install all the server components in separate docker containers on your local machine.
              - **Cloud (Rightscale)**: In this case, you can launch and connect to an instance of the server components running on a cloud instance.

              It's not required to run your development environment this way, and advanced configurations are discussed in the Deploy section later in the workshop
          - title: Pre-requisites
            description: |
              To start, it is easiest if you run all the components on the same machine. It's not required to run your development environment this way, and advanced configurations are discussed in the Deploy section but it is more convenient to start a development environment with components running locally.  
              
              #### Visual Studio 
              - Downloadable from [visualstudio.com](https://www.visualstudio.com/downloads/)
            
              #### Python (V 2.7 and above)
              - Downloadable from [python.org](https://www.python.org/downloads/)
              
              #### git
              - Downloadable from [git-scm.org](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)
              
              ## Try it out
              
              - Open Visual Studio
              - Verify python installation
                - Run the following command from your terminal command line
                ```bash
                python --version
                ```
                You should see the version of python displayed
              - Verify git installation
                - Run the following command from your terminal command line
                ```bash
                git --version
                ```
                You should see the version of git installed
      - title: Travel Mobile App
        milestones:
          
          - title: Travel Sample Mobile App
            description: |
              - Clone the "master" branch of the Travel Sample app from GitHub. We are doing a shallow pull with `depth` as 1 to speed the cloning process.
              ```bash
              git clone -b master --depth 1 https://github.com/couchbaselabs/mobile-travel-sample.git
              ```
              
              
              ## Try it out
              
              - Open the `TravelSample.sln` using Visual Studio
              - Build and run the project on your platform of choice (UWP, Xamarin iOS or Xamarin Android)
              - Verify that the login screen appears. The screenshot below is from a UWP App.
                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/master/content/assets/uwp_login.png)
    
      
      
      - title: Couchbase Server 5.0
        milestones:
          
          - title: Manual
            description: |
              In this lesson, you will install and launch version 5.0 of the Couchbase Server.

              **If you would prefer to use a docker container instead, please proceed to the [docker](/develop/csharp#/0/3/1) section**

              - [Download and install](https://www.couchbase.com/downloads#couchbase-server) V5.0 of Couchbase Server
              - In setup wizard, create Administrator account with user *Administrator* and password as *password*.
                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/master/content/assets/createadminuser.png)
    
              - As you follow the download instructions and setup wizard, make sure you keep all the services (data, query, and index) selected.
              
                ![](https://cl.ly/1o3H0t3f0d1n/cbs-services.png)
              
              - Install the sample bucket named *travel-sample* because it contains the data used in this tutorial. You can add the bucket from the "Sample Buckets" tab in the "Settings" menu in the admin console 
        
                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/master/content/assets/sample_bucket.png)
        
              - Create an RBAC user named **admin** with password **password** and **full access** to the travel-sample bucket. You can do this from the "Security" menu. These credentials will be used by the Sync Gateway to access the documents in this bucket.
                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/master/content/assets/add_rbac.png)

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/master/content/assets/RBAC_user.png)
        
              - Create a Full text search index on travel-sample bucket called 'hotels'. You can do this from the "Search" menu. Just go with default index settings.
                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/master/content/assets/add_fts.png)

                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/master/content/assets/fts.png)
        
              ## Try it out
              
              - Launch Couchbase Server (if not already runnning)
              - Log into the "Admin Console" with appropriate Administrator credentials you created during installation
              - Select the "Buckets" option from the menu on the left
              - Verify that you have around 31,000 documents in your travel-sample bucket       
           
          - title: Docker (Local)
            description: |
              - Create a local docker network named "workshop" if one does not exist already. Open a terminal window and run the following command
                ```bash
                $ docker network ls
                $ docker network create -d bridge workshop
                ```
              - To run the application in a container, you will first get the docker image from Docker Hub. Open a new terminal window and run the following.
                ```bash
                $ docker pull connectsv/server-internal:sandbox
                ```
              
              - Once the command has completed you can start the application with the following.
              
                ```bash
                $ docker run -d --name cb-server --network workshop -p 8091-8094:8091-8094 -p 11210:11210 connectsv/server-internal:sandbox
                ```
              
              - You can view the logs at any time by running the following command
                ```bash
                $ docker logs cb-server
                ```
              - It may take a few seconds for the server to startup. Verify that the docker image is running with following command
                ```bash
                $ docker ps
                ```
             
        
              ### Try it out
              
              - Launch Couchbase Server 
              - Log into the "Admin Console" with username as "Administrator" and password as "password"
              - Select the "Buckets" option from the menu on the left
              - Verify that you have around 31,000 documents in your travel-sample bucket

          - title: Cloud
            description: |

              **NOTE:** The RightScale cloud environment is only available for in-classroom run workshops. 
          
              Before you get started with this section, make sure your followed the instructions [here](/develop/csharp#/0/1/0) to download the Travel Mobile app.
              Use this option to connect to a private instance of Couchbase Server components running on Rightscale cloud environment. At the end of this lesson, the following components will be launched in the cloud-
              - Couchbase Server
              - Sync Gateway
              - Travel Web Application 
            
              NOTE: This instance will be available for you to use for the duration of the workshop. The instance will automatically be terminated after the workshop. Every user will have their own sandboxed instance.
            

              - Access [https://selfservice-4.rightscale.com/catalog](https://selfservice-4.rightscale.com/catalog) on your browser.
              - Log in with `workshop@couchbase.com` and `cbworkshop123` as the password.
              ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/master/content/assets/rightscale_login.png)
              - From the catalog of available projects, select the **Mobile Workshop 2017**, give it a name and then click **Launch**. 
              ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/master/content/assets/rightscale_selectproject.png)
              - Once the instance is running, You should see the state change to "launching". It will take several minutes to launch. So be patient!
              ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/master/content/assets/rightscale_launching.png)
              - Once the instance is running, You should see the state change to "running". There are two instances - one for "Develop" and  one for "Deploy". We are only interested in the "Develop" option.
              ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/master/content/assets/rightscale_running.png)
              
              Now that you have the instance up and running, you will have to edit the mobile app so it points to the newly deployed Python Web Server and Sync Gateway.
              
              **Open the file** `Constants.cs`. You must update the `ServerBackendUrl` constant which points to the Python Web Server. Replace the hostname with the IP Address of the Rightscale instance. In the example above that would be `54.148.83.39` but yours will be different.
              
              [Constants.cs](https://github.com/couchbaselabs/mobile-travel-sample/blob/master/dotnet/TravelSample/TravelSample.Core/Util/Constants.cs)

              ```csharp
              public static readonly Uri ServerBackendUrl = new Uri("http://54.148.83.39:8080/api/")
              ```
              
              Next, you will update the Sync Gateway endpoint.
              
              **Open the file** `LoginModel.cs`. You must update the `SyncUrl` constant. Replace the hostname with the IP Address of the Sync Gateway instance. In the example above that would be `54.148.83.39` but yours will be different.
              
              [LoginModel.cs](https://github.com/couchbaselabs/mobile-travel-sample/blob/master/dotnet/TravelSample/TravelSample.Core/Models/LoginModel.cs)
              
              Update the `localhost` to be the IP Address of the Sync Gateway. In my example (from screenshot above), that would be `54.148.83.39`.

              ```csharp
              private static readonly Uri SyncUrl = new Uri("blip://54.148.83.39:4984")
              ```
              
              ## Try it out (Couchbase Server)
              - Access Couchbase Server from the URL listed in the Deploy instance. In my example (from screenshot above), that would be `http://54.148.83.39:8091`
              - Log into the "Admin Console" with username as "Administrator" and password as "password"
              - Select the "Buckets" option from the menu on the left
              - Verify that you have around 31,000 documents in your travel-sample bucket
              
              ## Try it out (Sync Gateway)
              - Access Sync Gateway from the URL listed in the Deploy instance. In my example (from screenshot above), that would be `http://52.38.236.38:4984`
              - You should the following response
               ```json
               {
                "couchdb":"Welcome",
                "vendor":{"name":"Couchbase Sync Gateway","version":1.5},
                "version":"Couchbase Sync Gateway/1.5.0(594;e78dbf1)"
               }
               ```
            
              ## Try it out (Travel App)
              - Access Travel Web App from the URL listed in the Deploy instance. In my example (from screenshot above), that would be `http://54.148.83.39:8080`
              - Verify that you see the login screen of the Travel Sample Web App as shown below
                 ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/master/content/assets/try_cb_login.png)

          # - title: Docker Compose
          #   description: |
          #     Alternatively, you can use Docker compose to install all of the three server side components 
          #       - The Travel Sample Web App
          #       - Couchbase Server 5.0 
          #       - Sync Gateway 1.5.


          #     - Locate the `sync-gateway-config-travelsample.json` file at the root of the Travel Sample Mobile App Github repo that you cloned as per the instructions in the [Travel Sample Mobile Install](http://docs-build.sc.couchbase.com:9000/develop/java#/0/0/1) guide. For the app to connect to the Couchbase Server, the  IP Address of the the server needs to be specified. Since the Couchbase Server is running locally on your machine, this would be the local IP Address of your machine.
          #       -  Identify the local IP Address of your machine. On a Linux or macOS system, type in the following command in terminal
          #         ``` bash
          #         $ ifconfig
          #         ```
          #       - Open the `sync-gateway-config-travelsample.json` and look for `server`and update `localhost` with the local IP Address of your machine. In this example, the local IP Address is `192.168.1.121`
          #         ``` JavaScript
          #         "server": "http://192.168.1.121:8091"
          #         ```

          #     - Locate the `docker-componse.yml` file at the root of the Travel Sample Mobile App Github repo that you cloned as per the instructions in the [Travel Sample Mobile Install](http://docs-build.sc.couchbase.com:9000/develop/develop/csharp#/0/0/1) guide.
          #     - Open the  `docker-componse.yml` and review it (TO CHANGE WITH FINAL IMAGES AVAILABLE)
              
          #       ```yaml
          #       try-cb-python:
          #         image: jamiltz/try-cb-python 
          #         ports:
          #           - 8080:8080
          #         container_name: try_cb_python
          #       sync-gateway:
          #         image: connectsv/sync-gateway-internal:1.5.0-community 
          #         ports:
          #           - "4984-4985:4984-4985"
          #         command: -adminInterface :4985 /etc/sync_gateway/sync_gateway.json
          #         volumes:
          #           - ${PWD}/sync-gateway-config-travelsample.json:/etc/sync_gateway/sync_gateway.json
          #         container_name: sync_gateway
          #       ```
                
          #     - Run the following command to bring up all three containers
          #       ```bash
          #       $ docker-compose up
          #       ```
      - title: Sync Gateway 1.5
        milestones:
          - title: Manual
            description: |
              In this lesson, you will install and launch version 1.5 of the Sync Gateway

              **If you would prefer to use a docker container instead, please proceed to the [docker](/csharp#/0/4/1) section**
             
              - Install Sync Gateway 1.5 from [here](https://www.couchbase.com/downloads) on your platform of choice
              - The Sync Gateway will be launched with the config file named `sync-gateway-config-travelsample.json` that you should have downloaded as part of the [Travel Mobile App install](/develop/csharp#/0/1/0). The config file will be located in `/path/to/mobile-travel-sample`.
              - Open the sync-gateway-config-travelsample.json and confirm that the RBAC user credentials configured on the Couchbase Server are used by Sync Gateway for accessing the bucket 
              ```json
              "username": "admin",
              "password": "password",
              ```
              - Launch the Sync Gateway
              ``` bash
              $ cd /path/to/couchbase-sync-gateway/bin
              $ ./sync_gateway /path/to/mobile-travel-sample/sync-gateway-config-travelsample.json
              ```
            
              ## Try it out

              - Access this URL `http://localhost:4984` in your browser
              - Verify that you get back a JSON response similar to one below
              ```json
              {"couchdb":"Welcome","vendor":{"name":"Couchbase Sync Gateway","version":1.5},"version":"Couchbase Sync Gateway/1.5.0(594;e78dbf1)"}
              ```


          - title: Docker (Local)
            description: |
              *NOTE* : If you are running the Sync Gateway in a docker container, please make sure that you have the Couchbase Server running in a container as well. If not, please follow instructions [here](/develop/csharp#/0/2/1) to install the server container.

              - Create a local docker network named "workshop" if one does not exist already. Open a terminal window and run the following command
                ```bash
                $ docker network ls
                $ docker network create -d bridge workshop
                ```
              -  To run the application in a container, you will first get the docker image from Docker Cloud. 
                ```bash
                $ docker pull connectsv/sync-gateway-internal:1.5.0-community
                ```
              - The Sync Gateway will be launched with the config file named `sync-gateway-config-travelsample.json` that you should have downloaded as part of the [Travel Mobile App install](/develop/csharp#/0/1/0). The config file is located in `/path/to/mobile-travel-sample`.
              - Open the `sync-gateway-config-travelsample.json` file 
              - For the app to connect to the Couchbase Server, the address of the the server needs to be specified. Note that when you launched the Couchbase Server docker container, you gave it the `name` of "cb-server". Replace the `localhost` in the file with  `cb-server` and save
                
                ```json 
                "server": "http://cb-server:8091"
                ```

              -  Launch the Sync Gateway with the `sync-gateway-config-travelsample.json` file. Once the command has completed you can start the application with the following.
              
                ```bash
                $ cd /path/to/mobile-travel-sample/

                $ docker run -p 4984-4985:4984-4985 --network workshop --name sync-gateway -d -v `pwd`/sync-gateway-config-travelsample.json:/etc/sync_gateway/sync_gateway.json connectsv/sync-gateway-internal:1.5.0-community -adminInterface :4985 /etc/sync_gateway/sync_gateway.json
                ```
              
              - You can view the logs at any time by running the following command
                ```bash
                $ docker logs sync-gateway
                ```
              - Verify that the docker container named "sync-gateway" is running with the following command in the terminal window
                ```bash
                $ docker ps
                ```

              ### Try it out
              
              - Access this URL `http://localhost:4984` in your browser
              - Verify that you get back a JSON response similar to one below
              ```json
              {"couchdb":"Welcome","vendor":{"name":"Couchbase Sync Gateway","version":1.5},"version":"Couchbase Sync Gateway/1.5.0(594;e78dbf1)"}
              ```

          - title: Cloud
            description: |
              If you chose Cloud in the previous previous step then all the components (Sync Gateway, Couchbase Server and the Python Web App) are already installed and running. You can move on to the [next chapter](#/1/0/0) to learn about the data modeling requirements of the app.

          # - title: Docker Compose
          #   description: |
          #     Alternatively, you can use Docker compose to install all of the three server side components 
          #       - The Travel Sample Web App
          #       - Couchbase Server 5.0 
          #       - Sync Gateway 1.5.


          #     - Locate the `sync-gateway-config-travelsample.json` file at the root of the Travel Sample Mobile App Github repo that you cloned as per the instructions in the [Travel Sample Mobile Install](http://docs-build.sc.couchbase.com:9000/develop/java#/0/0/1) guide. For the app to connect to the Couchbase Server, the  IP Address of the the server needs to be specified. Since the Couchbase Server is running locally on your machine, this would be the local IP Address of your machine.
          #       -  Identify the local IP Address of your machine. On a Linux or macOS system, type in the following command in terminal
          #         ```bash
          #         $ ifconfig
          #         ```
          #       - Open the `sync-gateway-config-travelsample.json` and look for `server`and update `localhost` with the local IP Address of your machine. In this example, the local IP Address is `192.168.1.121`
          #         ```js
          #         "server": "http://192.168.1.121:8091"
          #         ```

          #     - Locate the `docker-componse.yml` file at the root of the Travel Sample Mobile App Github repo that you cloned as per the instructions in the [Travel Sample Mobile Install](http://docs-build.sc.couchbase.com:9000/develop/csharp#/0/0/1) guide.
          #     - Open the  `docker-componse.yml` and review it (TO CHANGE WITH FINAL IMAGES AVAILABLE)
              
          #         ```
          #          try-cb-python:
          #           image: jamiltz/try-cb-python 
          #           ports:
          #             - 8080:8080
          #           container_name: try_cb_python

          #           sync-gateway:
          #             image: connectsv/sync-gateway-internal:1.5.0-community 
          #             ports:
          #               - "4984-4985:4984-4985"
          #             command: -adminInterface :4985 /etc/sync_gateway/sync_gateway.json
          #             volumes:
          #               - ${PWD}/sync-gateway-config-travelsample.json:/etc/sync_gateway/sync_gateway.json
          #             container_name: sync_gateway
          #        ```
          #     - Run the following command to bring up all three containers
          #       ``` bash
          #       $ docker-compose up
          #       ```
          
      - title: Travel Web Backend
        milestones:
          - title: Manual
            description: |
              We will use the Python version of the [Travel Sample Web Backend ](https://developer.couchbase.com/documentation/server/current/sdk/python/sample-app-backend.html) which uses the Couchbase Python SDK to with with Couchbase Server Query Services.

              **If you would prefer to use a docker container instead, please proceed to the [docker](/develop/csharp#/0/2/1) section**
        
              - Install `libcouchbase` which is the Core C SDK used by the Python SDK
                - Follow instructions [here](https://developer.couchbase.com/server/other-products/release-notes-archives/c-sdk) to install libcouchbase on your platform of choice
        
              - Clone the 5.0 branch of Travel Sample web app repo
              ```bash
              $ git clone -b 5.0 https://github.com/couchbaselabs/try-cb-python.git
              ```         

              - We will run the Travel Web App in a Python virtual environment. 
                First, check if `virtualenv` is installed on your system
              ```bash
              $ virtualenv --version
              ```

              - if `virtualenv` is not installed , you can use `apt-get` or `pip` to install it
              ```bash
              $ sudo pip install virtualenv
              ```

              - Specify the folder for your virtual environment
              ```bash
              $ virtualenv /path/to/try-cb-python
              ```
              - Activate your environment. You should see a prompt as shown below
              ```bash
              $ source /path/to/try-cb-python/bin/activate
              $ (try-cb-python) Macintosh-2:try-cb-python mactester$ 
              ```

              - The application uses several Python libraries that need to be installed, this are listed in requirements.txt and can be automatically loaded using the pip command
              ``` bash
              cd /path/to/try-cb-python
              pip install -r requirements.txt
              ```
        
              - Update the travel.py file to reflect the username and password that you have used during Couchbase Server install. This defaults to "Administrator" and "password"
              ``` python
              DEFAULT_USER = "Administrator"
              PASSWORD = 'password' 
              ```

              - Now launch the Travel Web App
              ```bash
              python travel.py
              * Running on http://localhost:8080/ (Press CTRL+C to quit)
              ```
        
              ## Try it out
           
                - Open http://localhost:8080/ in your web browser
                - Verify that you see the login screen of the Travel Sample Web App as shown below
                  ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/master/content/assets/try_cb_login.png)
          - title: Docker (Local)
            description: |
              
              *NOTE* : If you are running the Web App in a docker container, please make sure that you have the Couchbase Server and Sync Gateway running in containers as well. If not, please follow instructions [here](/develop/csharp#/0/2/1) to install the server container and [here](/develop/csharp#/0/3/1) to install sync gateway container.

              - Create a local docker network named "workshop" if one does not exist already. Open a terminal window and run the following command
                ```bash
                $ docker network ls
                $ docker network create -d bridge workshop
                ```
              - To run the application in a container, you will first get the docker image from Docker Cloud. Open a terminal window and run the following.
              
                ```bash
                $ docker pull connectsv/try-cb-python
                ```
              
               - Once the command has completed you can start the application with the following.
              
                ```bash
                $ docker run -it -p 8080:8080 --network workshop connectsv/try-cb-python
                ```

                You should then see the following in the console output.
              
                ```bash
                Running on http://0.0.0.0:8080/ (Press CTRL+C to quit)
                ```
              ## Try it out
                - Open http://localhost:8080/ in your web browser
                - Verify that you see the login screen of the Travel Sample Web App as shown below
                  ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/master/content/assets/try_cb_login.png)
          - title: Cloud
            description: |
              If you chose Cloud in the previous previous step then all the components (Sync Gateway, Couchbase Server and the Python Web App) are already installed and running. You can move on to the [next chapter](#/1/0/0) to learn about the data modeling requirements of the app.

          # - title: Docker Compose
          #   description: |
          #     Alternatively, you can use Docker compose to install all of the three server side components 
          #       - The Travel Sample Web App
          #       - Couchbase Server 5.0 
          #       - Sync Gateway 1.5.


          #     - Locate the `sync-gateway-config-travelsample.json` file at the root of the Travel Sample Mobile App Github repo that you cloned as per the instructions in the [Travel Sample Mobile Install](http://docs-build.sc.couchbase.com:9000/develop/java#/0/0/1) guide. For the app to connect to the Couchbase Server, the  IP Address of the the server needs to be specified. Since the Couchbase Server is running locally on your machine, this would be the local IP Address of your machine.
          #       -  Identify the local IP Address of your machine. On a Linux or macOS system, type in the following command in terminal
          #         ``` bash
          #         $ ifconfig
          #         ```
          #       - Open the `sync-gateway-config-travelsample.json` and look for `server`and update `localhost` with the local IP Address of your machine. In this example, the local IP Address is `192.168.1.121`
          #         ``` JavaScript
          #         "server": "http://192.168.1.121:8091"
          #         ```

          #     - Locate the `docker-componse.yml` file at the root of the Travel Sample Mobile App Github repo that you cloned as per the instructions in the [Travel Sample Mobile Install](http://docs-build.sc.couchbase.com:9000/develop/csharp#/0/0/1) guide.
          #     - Open the  `docker-componse.yml` and review it (TO CHANGE WITH FINAL IMAGES AVAILABLE)
              
          #        ````
          #         try-cb-python:
          #           image: jamiltz/try-cb-python 
          #           ports:
          #             - 8080:8080
          #           container_name: try_cb_python

          #           sync-gateway:
          #             image: connectsv/sync-gateway-internal:1.5.0-community 
          #             ports:
          #               - "4984-4985:4984-4985"
          #             command: -adminInterface :4985 /etc/sync_gateway/sync_gateway.json
          #             volumes:
          #               - ${PWD}/sync-gateway-config-travelsample.json:/etc/sync_gateway/sync_gateway.json
          #             container_name: sync_gateway
          #        ```
          #     - Run the following command to bring up all three containers
          #       ``` bash
          #       $ docker-compose up
          #       ```
  - title: Design
    lessons:
        - title: Data Modeling
          milestones:
          - title: Introduction
            description: |
              Before diving into the document schemas, let's take a look again at the mobile app. When you ran the mobile app in the previous lesson, you may remember two different options were presented on the login screen:
              
              ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/master/content/assets/uwp_login_sync.png)
              
              - **Sync mode**: with the user credentials provided, this user can synchronize documents with Couchbase Server and, in turn, with other users.
              - **Guest/ Non Sync mode**: no user credentials are required for this option. This is a local only mode.
              
              Throughout the next lessons, you will be switching between those two modes to test different functionalities. It's worth noting that the data model is slightly different between those two modes. Let's review the data model for each one.
              
              ### Sync mode
              
              Here, the application communicates with Couchbase Server (via Sync Gateway). The documents stored in the Couchbase Server bucket have the following types:
              
              - `airline`
              - `airport`
              - `hotel`
              - `route`
              - `landmark`
              - `user`
              
              Except for the **user** document (right on the diagram below), most of the documents are static/semi-static in nature. 
              
              ![](https://cl.ly/40330Z0M1k3F/models.png)
                
              ### Guest/Non Sync mode
                
              In guest mode, the mobile app creates a new database for the anonymous user. It is an empty database for storing the list of bookmarked hotels locally. 

              It is conceivable that in a real-world application, a user of the Travel Sample Mobile app may be interested in browsing for hotels in specific locations meeting specific search criteria without having to actually sign up. They could bookmark these hotels and later add them to their trip reservations. These bookmarked hotels could also be shared with other users, for instance with the user making the trip bookings.

              In guest mode, the Couchbase Lite database hosts the following types of documents:
                  
              - `bookmarkedhotels` 
              - `hotel`
                
              ![](https://cl.ly/2l0118183p11/guest-model.png)

          - title: Document Types
            description: |
              Unlike tables, in Couchbase, all the documents are stored in the same namespace. So you typically use an additional property to differentiate between each entity. Let’s call it "type".
              ![](https://cl.ly/1w2D1Z2J0p47/document-types.png)
              
              ## Try it out
              
              - Log into the "Admin Console" of Couchbase Server with same Administrator credentials you used during installation
              - Select the "buckets" option from menu on left
              - Click on "Documents" under the travel-sample bucket
              - Search for document with ID "hotel_10025"
              - Verify that the "type" property of the document is "hotel"

          - title: Document Key/ID
            description: |
              Every document in Couchbase is associated with a unique key that must be provided by the user when the document is created. The key is the unique identifier of the document and can take any format. However, it is recommended that you give it a value that provides some context about the contents of the document.
              For instance, in the travel app data set, the document Key/ID is of the format `{doc.type}_{alphanumeric_string}`. Here `{doc.type}` provides some context of the purpose of the document and in combination with the `{alphanumeric_string}`, it uniquely identifies the string.
              The document Key will be listed as “ID” on Couchbase Server admin console. The key is also referred to as the Document ID.
              
              ![](https://cl.ly/0K3V1q3m3K1Z/admin-ui.png)
              
              ## Try it out
              
              - Log into the "Admin Console" of Couchbase Server with appropriate Administrator credentials you created during installation
              - Select the "buckets" option from the menu on the left 
              - Click on "Documents" under the travel-sample bucket
              - Search for document with ID "airline_137"
              - Verify that the "callsign" property of the document is "AIRFRANS"

          - title: Document _id
            description: |
              When Sync Gateway processes a document, it adds relevant metadata to the document. The metadata includes an "_id" property that corresponds  to the document ID. You will see this property if you query for the document via the the Sync Gateway REST API.
              
              ```json
              {
                  "_id": "airline_137",
                  "_rev": "1-b4e60280a1a0e3d46efad7bfd0e2068c",
                  "callsign": "AIRFRANS",
                  "country": "France",
                  "iata": "AF",
                  "icao": "AFR",
                  "id": 137,
                  "name": "Air France",
                  "type": "airline"
              }
              ```
              
              Mobile App Developers using Couchbase Lite  should typically never have to directly read or write the _id property. You would query the meta().id field to fetch the document ID. We will learn more about this in our lesson on Queries.

              ## Try it out
              
              - Confirm that the sync gateway is running
              - Run the following `curl` command on your terminal. If you used cloud install, replace `localhost` with the IP Address of the Sync Gateway cloud instance in command below. The Authorization credentials correspond to a pre-defined "admin" user . We will learn more about user configuration in the [Access Control](/develop/csharp#/2/2/1) section
              ```bash
              curl -X GET http://localhost:4984/travel-sample/airline_137 -H 'authorization: Basic YWRtaW46cGFzc3dvcmQ='
              ```
              - Confirm that "_id" property in the JSON response is "airline_137"

  - title: Develop
    lessons:
      - title: MVVM Architecture
        milestones:
          - title: Overview
            description: |
              ### The Model-View-ViewModel pattern
              
              In our app, we follow the MVVM pattern, which decouples the retrieval of data, view logic, and presentation into three distinct areas.
              
              ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/master/content/assets/uwp_mvvm.png)
   

              #### Model
              
              The model provides and stores the internal data. In our travel app, for simplicity, we use standard data types of `Dictionary` and `Array` to represent the data. In a real application, one would use a custom  object to represent the model. 
              
              The app implements the following models
              - _Booking_ which represents a flight reservation
              - _Flight_ which represents airline details
              - _Airport_ which represents airport name
              - _Hotel_ which represents hotel details

              In addition, the `CouchbaseSession` class is used to keep state through multiple pages.
              
              
              #### View
              
              In the Travel app, the  `ContentPage` class represents the "view" in MVVM. It handles user input and forwards requests to the VIew Model. It updates the UI based on response from the View Model.
              
              The app implements the following Views
              - _LoginPage_ which represents the login UI
              - _BookmarkedHotelsPage_ which represents the UI that lists bookmarked hotels
              - _FlightBookingsPage_ which represents the flight reservations UI
              - _HotelsListPage_ which represents the UI that lists hotels
              - _HotelDetailsPage_ which represents the UI that lists hotel details
                           
              #### View Model
              
              The View Model acts as the intermediary between the View and the Model. It is responsible for interacting with the model and updating it's state to indicate how the view should present itself.  There is one view model per view and is named according to the view

              - _LoginViewModel_
              - _BookmarkedHotelsViewModel_
              - _FlightBookingsViewModel_
              - _HotelsListViewModel_
              - _HotelDetailsViewModel_

      - title: The Basics
        milestones:
          - title: Create a Database
            description: |
              There is no limit to how many databases can be created or opened on the device. You can think of a database as a namespace for documents and several databases can be used in the same app (one database per user of the app is a common pattern).

              The snippet below creates an empty database for a given user in a directory with the same name as the username.

              **Open the file** `LoginModel.cs`. We will review the `Task<CouchbaseSession> StartSessionAsync(string username, string password)` method. 

              [LoginModel.cs](https://github.com/couchbaselabs/mobile-travel-sample/blob/master/dotnet/TravelSample/TravelSample.Core/Models/LoginModel.cs#L54)
              ```csharp 
              public async Task<CouchbaseSession> StartSessionAsync(string username, string password) {
                ...
              }
              ```
              We create a folder for the user database if one does not exist and specify that as the database `Directory` in the `DatabaseConfiguration` object.  Note the use of the service provider to find the default directory for the platform.
              ```csharp
              var options = new DatabaseConfiguration();
               
              // Borrow this functionality from Couchbase Lite
              var defaultDirectory = Service.Provider.GetService<IDefaultDirectoryResolver>().DefaultDirectory();
              var userFolder = Path.Combine(defaultDirectory, username);
              if (!Directory.Exists(userFolder)) {
                  Directory.CreateDirectory(userFolder);
              }
          
              options.Directory = userFolder;
              ```
              The Couchbase Lite Database is created with specified name and `DatabaseConfiguration` object
              ```csharp
              db = new Database(DbName, options);
              
              ```
              
              ## Try it out
              
              - Build and Run the Travel Sample Mobile App
              - On Login screen select “Proceed as Guest” option. 
              - This will log you into app in Guest Mode. Signing in as Guest will create a new empty  database for “guest” account if one does not exist
              - Confirm that you see the “Bookmarked Hotels” page. It will be empty the very first time.
          - title: Create and Update a Document
            description: |
              Bookmarked hotels are persisted in a separate document with `type` of `bookmarkedhotels`. 
              
              The first time a hotel is bookmarked, the `bookmarkedhotels` document is created with the document ID of that hotel document in the `hotels` property. The hotel's information is persisted in a separate `hotels` type document. 

              Subsequently, every time a hotel is bookmarked, the process repeats.

              ```json
              {
                "_id": "hotel1",
                "name": "San Francisco Hotel",
                "address": "123, Park Street, San Francisco"
              }
              
              {
                "type": "bookmarkedhotels",
                "hotels": ["hotel1", "hotel2"]
              }
              ```
              **Open the file** `HotelListModel.cs`. We will review the `void ToggleBookmark(HotelListCellModel hotel)` method. 
              
              [HotelListModel.cs](https://github.com/couchbaselabs/mobile-travel-sample/blob/master/dotnet/TravelSample/TravelSample.Core/Models/HotelListModel.cs#L90)

              ```csharp
              public void ToggleBookmark(HotelListCellModel hotel) {
                  ...
              }

              ```

              Fetch the document of type `bookmarkedhotels`. Don't worry too much about how you query for document of specific type from the database. We will examine `queries` in a future lesson.

              Create document of type `bookmarkedhotels` if one does not exist.
              ```csharp
              using (var document = UserSession.FetchGuestBookmarkDocument()?.ToMutable()) {
                var doc = document;
                if (document == null) {
                    ...

                    doc = new MutableDocument(new Dictionary<string, object> {["type"] = "bookmarkedhotels"});
                }
              ```
              
              Next, add the ID of the passed hotel to the current list of bookmarked hotel Ids from the `hotels` property of the `bookmarkedhotels` document, or remove it based on the current action.
              ```csharp
              var bookmarked = doc.GetArray("hotels") ?? new MutableArray();
              if (hotel.IsBookmarked) {
                  // Remove the bookmark
                  for (int i = 0; i < bookmarked.Count; i++) {
                      if (bookmarked[i].ToString() == hotel.Source["id"] as string) {
                          bookmarked.RemoveAt(i);
                          break;
                      }
                  }
              } else {
                    bookmarked.Add(hotel.Source["id"] as string);
              }

              doc.Set("hotels", bookmarked);
              UserSession.Database.Save(doc);
              ```

              Persist the hotel information as separate documents of type `hotels` (or delete it if this is a bookmark removal). First, determine if the document with specified hotel Id already exists. If so, update it with the selected hotel details.  If not, create a new hotel document.
              ```csharp
              // Add the hotel details document
              if (hotel.Source["id"] is string id) {
                  using (var detailDoc = UserSession.Database.GetDocument(id).ToMutable() ?? new MutableDocument(id)) {
                      detailDoc.Set(hotel.Source.ToDictionary(x => x.Key, x => x.Value));
                      UserSession.Database.Save(detailDoc);
                  }
              }
              ```
              
              ## Try it out
              
              - As Guest User, tap on “hotels” button
              - In "location" text field , enter "London"
              - You will see list of hotels. 
              - The list of hotels is pulled from the Couchbase Server via the Travel Sample Web Services API. The list of hotels is not displayed unless there is an open connection the python web app so make sure you have your Travel Sample Web app running
              - Right click/tap on the first hotel cell
              - You will see the button to  “Bookmark” 
              - Tap “bookmark”
              - This should display a "bookmark" icon on the hotel cell
              - Tap "Back" button
              - Verify that you see the bookmarked hotel in the “Bookmarked Hotels” screen. A motivation for having separate docs for each bookmarked hotel is if they become sharable between users via the sync function.
              
              The screen capture is for UWP version of the app.

              ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/master/content/assets/uwp_basics_add_document.gif)
          # - title: Update a Document
          #   description: |
          #     To update a document, you must retrieve it from the database, modify the desired properties and write them back to the database. The update method does this operation for you in the form of a callback.            
          #     The code below updates the list of bookmarked hotel Ids in the "hotels" property of the _"bookmarkedhotels"_ document. The first time a hotel is bookmarked, the _"bookmarkedhotels"_ document is created. Subsequently, every time you bookmark a hotel, the hotel Id is added to "hotels" property of the _"bookmarkedhotels"_ document.
        
          #     The code snippet can be found in the HotelPresenter.csharp file in the [bookmarkHotels](https://github.com/couchbaselabs/mobile-travel-sample/blob/master/ios/TravelSample/TravelSample/Presenter/HotelPresenter.csharp#L36) function.
              
          #     ```csharp
          #     // get existing "BookmarkedHotels" document if one exists
          #     var document = try fetchGuestBookmarkDocumentFromDB(db)
                     
          #     // ....trimming other app logic code ...... 
    
          #     // Update the bookmarked list with the Ids of hotels
          #     var bookmarked = document?.array(forKey: "hotels")
                        
          #     // Ideally have an API that would append elements of a native array to existing ArrayObject
          #     for newId in newlyAddedIds {
          #          bookmarked = bookmarked?.addString(newId)
          #     }
                        
          #     if let document = document {
          #       // Update and save the bookmark document
          #       document.setArray(bookmarked, forKey: "hotels")
          #       try db.save(document)
                   
          #       // ....trimming other app logic code ...... 
          #     }
          #     ```
              
          #     ## Try it out
              
          #     - Follow the steps in [Create a Document](/develop/csharp#/2/0/0) section
          #     - As Guest User, tap on “hotels” button
          #     - In "location" text field , enter "London"
          #     - You will see list of hotels. 
          #     - Verify that the first hotel in the list is bookmarked. If not, make sure you follow instructions in [Create a Document]() section.
          #     - Swipe right on the second hotel cell
          #     - You will get option to  “Bookmark” 
          #     - Tap “bookmark”
          #     - This should display a "bookmark" icon on the hotel cell
          #     - Tap "Cancel" button 
          #     - Verify that you see two bookmarked hotels in the “Bookmarked Hotels” screen

          #     ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/master/content/assets/basics_update_document.gif)
         
          - title: Delete a Document
            description: |
              A document can be deleted using the `Delete` method. This operation actually creates a new `tombstoned` revision in order to propagate the deletion to other clients.
              
              **Open the file** `BookmarkedHotelModel.cs`. We will review the `public void RemoveBookmark(HotelListCellModel bookmark)` method. 
              
              [BookmarkedHotelModel.cs](https://github.com/couchbaselabs/mobile-travel-sample/blob/master/dotnet/TravelSample/TravelSample.Core/Models/BookmarkedHotelModel.cs#L102)
              ```csharp
              public void RemoveBookmark(HotelListCellModel bookmark) {
                ...
              }
              ```
              
              The unbookmarking process removes the hotel Id from the "bookmarkedhotels" document and deletes the unbookmarked "hotels" document from the database. Note that in addition to deleting the "hotels" document, the unbookmarking process updates the "bookmarkedhotels" document by removing the the hotel Id from the `hotels` array.
              
              ```csharp
                                 
              if (bookmark.Source["id"] is string idToRemove) {
                  var doc = UserSession.Database.GetDocument(idToRemove);
                  if (doc != null) {
                      UserSession.Database.Delete(doc);
                  }
              }
              ```
               
              ## Try it out
              
              - Follow the steps in [Update a Document](http://docs.couchbase.com/tutorials/travel-sample/develop/csharp/#/2/1/1) section to bookmark a hotel
              - Confirm that you see the bookmarked hotels in the "Bookmarked Hotels" screen. If not, make sure you go through the instructions in [Update a Document](http://docs.couchbase.com/tutorials/travel-sample/develop/csharp/#/2/1/1) section 
              - Right click/tap on the first Hotel cell
              - You will get button to  “UnBookmark” 
              - Tap “unbookmark”
              - Verify that the unbookmarked hotel does not show up in list

              The screen capture is for UWP version of the app.

              ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/master/content/assets/uwp_basics_delete_document.gif)
             
      - title: Security
        milestones:
          - title: User Management
            description: |
              User is created via the Travel sample web app. When a user is created, a corresponding user profile document is created on Couchbase Server.
            
              ## Try it out (Web App)
              
              - Access the Travel Web App URL in the browser. This URL would be [http://localhost:8080](http://localhost:8080) if you installed the web app manually or via docker container. If you used the Cloud install, please access the cloud instance of the web app.
              - Create a new user by entering "demo" as the username and "password" for the password. Make sure the "create new user" checkbox is selected.
              - You should be logged into the web app. There should be nothing created for the user.

              ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/master/content/assets/web_user_signup.gif)

              ## Try it out (Couchbase Server)
              - Access the Couchbase Server URL in the browser. This URL would be [http://localhost:8091](http://localhost:8091) if you installed the server  manually or via docker container. If you used the Cloud install, please access the cloud instance of the server.
              - Log in with Administrator credentials that you set up during the installation of Couchbase Server.
              - In the search box, enter "user::demo".
              - You should see the user document that was created when you signed up via the web app.
              - Confirm that the "username" that you see is "demo"

              ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/master/content/assets/cb_user_auth.gif)

          - title: Access Control
            description: |
              In this lesson you’ll be introduced to Sync Gateway, our secure web gateway. The Couchbase Sync Gateway is an 
              Internet-facing synchronization mechanism that exposes a web interface which provides
              - Data Synchronization and Routing
              - Authorization and Access Control
              
              In this chapter, we will focus on Authorization and Access Control. We will discuss Data Synchronization and Routing in the [Sync](/develop/csharp#/2/3/0) chapter.
             
              In the "Installation" guide, we walked you through the steps to launch Sync Gateway with a specific config file. The Sync Gateway configuration file determines the runtime behavior of Sync Gateway.

              Open the sync-gateway-config-travelsample.json file located at https://github.com/couchbaselabs/mobile-travel-sample/blob/master/sync-gateway-config-travelsample.json.

              - The `users` section defines the hardcoded list of users who are granted access. It includes the "demo" user that we created via the Travel Web App in the "User Management" section. A "tester" and "admin" user is also configured.
              Note that in a real world app, when a user registers via the web app, the web app would use the Sync Gateway REST API to dynamically create the user. 
              ```javascript
               "users":{
                  "admin": {"password": "password", "admin_channels": ["*"]}, 
                  "demo": {"password": "password"},
                  "tester": {"password": "password"}
                }
              ```

              - The `sync function` in the config file is a JavaScript function which implements the access control logic. The `access` method is used to grant the current user access to specific channel. We will discuss channels in detail in the ["Sync"](/develop/csharp#/2/3/0) section. For now, it is sufficient to note that documents are associated with channel(s). So access to a document is controlled by controlling the access rights to a channel.

              ``` JavaScript
                // Give user read access to channel
                if (!isDelete()) {
                // Deletion of user document is essentially deletion of user
                access(username,"channel." + username)
              }
              ```
            
              ## Try it out
            
              - Run the following command in your terminal. If you did a cloud based install, please replace `localhost` in the command below with the IP Address of the cloud instance of the Sync Gateway.
              ```bash
              curl -X GET http://localhost:4984/travel-sample/
              ```
              - Confirm that you see an "Unauthorized" error from the server
              - Run the following command in yout terminal. The `authorization` header is base64 encoded value of "demo:password". If you did a cloud based install, please replace `localhost` in the command below with the IP Address of the cloud instance of the Sync Gateway.
              ```bash
              curl -X GET http://localhost:4984/travel-sample/ -H 'authorization: Basic ZGVtbzpwYXNzd29yZA=='
              ```
              - Confirm that you see the details of the "travel-sample" database and "state" is "online"

      - title: Sync
        milestones:
          - title: Channels/Data Routing
            description: |
              In the lesson on [Access Control](/csharp#/2/2/1) we discussed how the Couchbase Sync Gateway supports Authorization and Access Control functions. In this lesson we discuss how it can be used for Data Synchronization and Routing.
     
              A Sync Gateway configuration file determines the runtime behavior of Sync Gateway, including server configuration and the database or set of databases with which a Sync Gateway instance can interact.  

              - Sync Gateway uses channels to make it easy to share a database between a large number of users and control access to the database. Conceptually, a channel could be viewed as a tag. Every document in the database belongs to a set of channels, and a user is granted appropriate access a set of channels. A channel is used to  

                - Partition the data set
                - Authorize users to access documents.
                - Minimize the amount of data synced down to devices.


              In the "Installation" guide, we walked you through the steps to launch Sync Gateway with a specific config file.
              Open the sync-gateway-config-travelsample.json file located at https://github.com/couchbaselabs/mobile-travel-sample/blob/master/sync-gateway-config-travelsample.json. It includes the `sync function` which is a JavaScript function whose source code is stored in the Sync Gateway's database configuration file.
    
              ```javascript
              /* Routing */
              // Add doc to the user's channel.
              channel("channel." + username);

              ```
          
          - title: XAttrs
            description: |
              Before you begin this lesson, confirm that you have the Sync Gateway up and running by following the instructions in the ["Installation"](/develop/csharp#/0/4/0) section.

            
              Starting with Sync Gateway 1.5 and Couchbase Server 5.0, mobile and server/web applications now have the ability to read and write to the same bucket. It is an opt-in feature can be enabled in the Sync Gateway configuration file.
             
             
              Prior to 1.5, sync metadata used by the Sync Gateway for replication with mobile clients was included within the documents as part of the `_sync` property. 
              In 1.5, the sync metadata is moved into the Extended Attributes or XAttrs associated with the document. 

             
              This can be enabled through a configuration setting in the sync gateway config file
              Open the sync-gateway-config-travelsample.json file located at https://github.com/couchbaselabs/mobile-travel-sample/blob/master/sync-gateway-config-travelsample.json

              ```javascript
              "import_docs": "continuous",
              "enable_shared_bucket_access":true
              ```

          - title: Replication
            description: |
              Replication is the process by which clients running Couchbase Lite synchronize database changes with the remote (server)  database.
              
              - Pull Replication is the process by which clients running Couchbase Lite download database changes from the remote (server) source database to the local target database
              - Push Replication is the process by which clients running Couchbase Lite upload database changes from the local source database to the remote (server) target database 
              
              Couchbase Mobile 2.0 introduces a brand new replication protocol which is implemented over the BLIP messaging protocol layered over WebSocket. 
              ![](https://blog.couchbase.com/wp-content/uploads/2017/08/layered.png)
              
              The replication process can be “continuous” or “one shot“.
              - In “Continuous” replication mode, the changes are continually synchronized between the client and Sync Gateway.
              
              - In “One shot” mode, the changes are synchronized once and the connection between the client and server disconnects. When any future changes need to be pushed up or pulled down, the client must start a new replication. 

               **Open the file** `LoginModel.cs`. We will review the method `StartReplication(string username, string password, Database db)`

              [LoginModel.cs](https://github.com/couchbaselabs/mobile-travel-sample/blob/master/dotnet/TravelSample/TravelSample.Core/Models/LoginModel.cs#L103)

              ```csharp
              private Replicator StartReplication(string username, string password, Database db)
                ...
              }
              ```
              First, Do some checks to confirm the validity of the user credentials 
              ```csharp
              if (String.IsNullOrWhiteSpace(username) || String.IsNullOrWhiteSpace(password)) {
                throw new InvalidOperationException("User credentials not provided");
              }
              ```
              Create the URL of the Sync Gateway
              ```csharp
              var dbUrl = new Uri(SyncUrl, DbName);
              ```

              The `ReplicatorConfiguration` is initialized with the local database and URL of the target DB on Sync Gateway. 
              The `ReplicatorType` in the Replicator Config specifies the type of replication. In the code snippet in the Travel  app, it is `PushAndPull` indicating that both push and pull replication is enabled. The `Continuous` mode is set to `true` in the Travel app.

              ```csharp
              var config = new ReplicatorConfiguration(db, dbUrl) {
                ReplicatorType = ReplicatorType.PushAndPull,
                Continuous = true,
                ...
              };
              ```
              
              The Replicator is configured with relevant authentication credentials. In the Travel app, the list of users that are permitted access is configured in the Sync Gateway configuration file as discussed in the [Access Control](/develop/csharp#/2/2/1) section
          
              ```csharp
              var config = new ReplicatorConfiguration(db, dbUrl) {
                  ...
                  Authenticator = new BasicAuthenticator(username, password),
                  ...
              };
              ```

              The Replicator is configured to only pull from current user's channels. The list of channels that the user has access to is defined in the Sync Gateway configuration file as discussed in the [Channels/ Data Routing](/develop/csharp#/2/3/0) section
          
              ```csharp                
              var config = new ReplicatorConfiguration(db, dbUrl) {
                  ...
                  Channels = new[] {$"channel.{username}"}
              };
              ```

              The Replicator is initialized with the specified configuration 
              ```csharp
              var repl = new Replicator(config);
              ```

              A change listener callback block is registered to listen for replication changes. Every time, there is a push or pull change, the callback is invoked. 

              ``` csharp
              repl.StatusChanged += (sender, args) =>
              {
                  var s = args.Status;
                  Debug.WriteLine(
                      $"PushPull Replicator: {s.Progress.Completed}/{s.Progress.Total}, error {args.LastError?.Message ?? "<none>"}, activity = {s.Activity}");
              };
                    
              ```
              Start the Replication
              ```csharp
              repl.Start();
              ```
               
              
              ## Try it out (Push Replication)
              
              - Log into the Travel Sample Mobile app as “demo” user and password as “password”
              - Tap on  "+" button to make a flight reservation
              - Leave the default airport in the “From” field
              - Leave the default airport in the "To" field
              - Enter From and/or Return Dates
              - Tap "lookup" button
              - From list of flights, select the first flight listing
              - Select “Confirm Booking” 
              - Access the Travel Sample Web app. The URL would be [http://localhost:8080](http://localhost:8080). If you did cloud based install, please replace `localhost` in the URL  with the IP Address of the cloud instance of the web app.
              - Make sure that the "New User" checkbox is **unchecked**
              - Log into the web app as “demo” user with password as “password”
              - Confirm that you see the flight that you reserved via the mobile app in your list of flights in the web app

              The screen recording is for UWP version of the app
              ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/master/content/assets/uwp_push_replication.gif)
           
             
              
              ## Try it out (Pull Replication)
              
              - Access the Travel Sample Web app. The URL would be [http://localhost:8080](http://localhost:8080). If you did cloud based install, please replace `localhost` in the URL  with the IP Address of the cloud instance of the web app.
              - Make sure that the "New User" checkbox is **unchecked**
              - Log into the web app as “demo” user with password as “password”
              - Make a flight reservation by clicking "booking" button.
              - Enter “From” airport as "JFK" and select the airport from drop down menu.
              - Enter “To” airport as "DTW" and select the airport from drop down menu.
              - Enter From and/or Return Travel Dates
              - Click on "Find Flights" button
              - From list of flights, select the first flight listing
              - Confirm the booking by clicking on the shopping cart icon and click on “Book” button
              - If you are not already logged into the mobile app, Log into the Travel Sample Mobile app as “demo” user and password as “password”    
              - Confirm that you see the flight that you reserved via the web app in your list of flights in the mobile app

              The screen recording is for UWP version of the app
              ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/master/content/assets/uwp_pull_replication.gif)

      - title: Pre-built database
        milestones:
          - title: Starting with Prebuilt Database
            description: |
              In this section, you will learn how to bundle a pre-built Couchbase Lite database in an application. It can be a lot more efficient to bundle static or semi-static content database in your application and install it on the first launch. Even if some of the content changes on the server after you create the app, the app's first pull replication will bring the database up to date.
              Here, you will use a pre-built database that contains only airport and hotel documents. The code below moves the pre-built database from the bundled location to the platform default directory defined by Couchbase.
              
              **Open the file** `LoginModel.cs` and navigate to the `StartSessionAsync` method.
              
              This method first checks if a database file already exists. If it doesn't exist it loads the database according to the logic for the platform (UWP from the Assets folder, iOS from the main bundle, Android from Assets)
              
              [DatabaseManager.csharp](https://github.com/couchbaselabs/mobile-travel-sample/blob/master/dotnet/TravelSample/TravelSample.Core/Models/LoginModel.cs#L54)
              
              ```csharp
               if (!Database.Exists(DbName, userFolder)) {
                  // Load prebuilt database to path
                  var copier = Service.Provider.GetService<IDatabaseSeedService>();
                  await copier.CopyDatabaseAsync(userFolder);

                  db = new Database(DbName, options);
                  CreateDatabaseIndexes(db);
              }
              ```
              
              ## Try it out 
              
              - Log into the Travel Sample Mobile app as “demo” user and password as “password”
              - Tap on  "+” button to make a flight reservation
              - In the “From”  airport textfield, enter “San”
              - Confirm that the first item in the dropdown list of "San Diego Intl" 
              
              ** Note ** that this is not currently functioning in Xamarin iOS since the custom drop down view has not been implemented
              
              The screen recording is for UWP app.

              ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/master/content/assets/uwp_prebuilt.gif)
              
      - title: Query
        milestones:
          - title: Overview
            description: |
              Couchbase Lite 2.0 includes support for N1QL like query interface. Database can be queried by constructing a query using a Query builder  and then executing that query.

              The Query interface in Couchbase Lite 2.0 is poweful and includes support for the following among others
              - Pattern Matching 
              - Regex Matching
              - Math Functions
              - String Manipulation Functions
              - Aggregate Functions
              - Grouping
              - Joins (within single database)
              - Sorting
              - NilOrMissing properties

              #### Implementation Pattern
              The `select` clause and `where` clause in the `Query` statement require a `CouchbaseLite.Expression` type. Consider the following query 
              ``` csharp
              var hotelSearchQuery = Query
                                .Select(SelectResult.Expression(Expression.Meta().ID),
                                        SelectResult.Expression(Expression.Property("name"))) 
                                .From(DataSource.Database(UserSession.Database))
                                .Where(
                                    Expression.Property("description").Like("%\(descriptionStr)%")
                                   .And(Expression.Property("type").EqualTo("hotel"))
                                   .And(Expression.Property("country").EqualTo(locationStr)
                                   .Or(Expression.Property("city").EqualTo(locationStr))
                                   .Or(Expression.Property("state").EqualTo(locationStr))
                                   .Or(Expression.Property("address").EqualTo(locationStr))))
 

              ```
              Often types, the same `Expression` may be required across multiple queries. This can quickly become tedious and difficult to maintain. The recommended pattern is to define constants corresponding to the Expressions and to reuse them across queries.

              As an example, Open the [AddBookingModel.cs](https://github.com/couchbaselabs/mobile-travel-sample/blob/master/dotnet/TravelSample/TravelSample.Core/Models/AddBookingModel.cs#L43) file. This file defines some of the CouchbaseLite expressions that are used for flight reservations
              ```csharp
                private static readonly IExpression AirportNameProperty = Expression.Property("airportname");
                private static readonly ISelectResult AirportNameResult = SelectResult.Expression(AirportNameProperty);
                private static readonly IExpression FaaProperty = Expression.Property("faa");
                private static readonly IExpression IcaoProperty = Expression.Property("icao");

              ```

          - title: Simple Query
            description: |
              The travel app has many instances of querying the database. We will discuss a simple example here.

              **Open the file** `AddBookingModel.cs`. We will review the `FetchMatchingAirports` method.
              
              [AddBookingModel.cs](https://github.com/couchbaselabs/mobile-travel-sample/blob/master/dotnet/TravelSample/TravelSample.Core/Models/AddBookingModel.cs#L124)
              
              ```csharp
              public Airports FetchMatchingAirports(string searchStr) {
                ...
              }
              ```
              
              There are 3 different queries in this function body. The query that is ran depends on the length of the search term. You can ignore this specificity, in this section we will look at the 3rd query.
              
              The query below **selects** the "name" property in documents **from** the database **where** the **type** property is equal to **airport** and the "airportname" property is equal to the search term.
          
              ```csharp
              searchQuery = Query
                      .Select(AirportNameResult)
                      .From(DataSource.Database(UserSession.Database))
                      .Where(TypeProperty
                          .EqualTo("airport")
                          .And(AirportNameProperty
                              .Like($"{searchStr}%")));
              ```
            
              Next, the query is executed using the `Run()` method. Each row in the result will contain a single property called "airportname".
              
              ```csharp
              using (var results = searchQuery.Run()) {
                  return results.Select(x => x.GetString("airportname")).Where(x => x != null).ToList();
              }

              // Don't forget to Dispose the query object when finished       
              ```
          
              ## Try it out
              
              - Log into the Travel Sample Mobile app as “demo” user and password as “password”
              - Tap on  "+"" button to make a flight reservation
              - In the “From”  airport textfield, enter "San""
              - Verify that the first item in the drop down list is "San Diego Intl"

              ** Note ** that this is not currently functioning in Xamarin iOS since the custom drop down view has not been implemented
              
              The screen recording is for UWP app.
              
              ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/master/content/assets/uwp_prebuilt.gif)
              
          - title: Advanced Query 
            description: |
              In this section we will discuss the JOIN query. JOIN Queries in Couchbase Lite 2.0 are intra-database joins.
              
              If you recall from the Data Modeling section, the document with a **type** equal to "bookmarkedhotels" contains a **hotels** property which is an array of IDs of bookmarked hotels.
              
              ```json
              {
                "_id": "hotel1",
                "name": "San Francisco Hotel",
                "address": "123, Park Street, San Francisco"
              }
              
              {
                "type": "bookmarkedhotels",
                "hotels": ["hotel1", "hotel2"]
              }
              ```
              
              We will review the query that fetches documents whose `_id` is included in the "hotels" property array of the document of type "bookmarkedhotels".
              
              **Open the file** `BookmarkedHotelModel.cs`. We will review the `FetchBookmarkedHotels` method.
               
              [BookmarkedHotelModel.cs](https://github.com/couchbaselabs/mobile-travel-sample/blob/master/dotnet/TravelSample/TravelSample.Core/Models/BookmarkedHotelModel.cs#L76)
              
              ```csharp
              public Hotels FetchBookmarkedHotels() {
                  ...
              }
              ```
              
              First, we instantiate two data sources which corresponds to the two sides of the join query.
              
              ```csharp
              var bookmarkSource = DataSource.Database(UserSession.Database).As(BookmarkDbName);
              var hotelsSource = DataSource.Database(UserSession.Database).As(HotelsDbName);
              ```
              
              Next we use query expressions. The first one gets the `hotels` property on the bookmarks data source. The seconds get the document ID on the hotels data source.
              
              ```csharp
              // Static variables of the class
              private static readonly IExpression HotelsProperty = Expression.Property("hotels").From(BookmarkDbName);
              private static readonly IExpression HotelIdProperty = Expression.Meta().ID.From(HotelsDbName);
              ```
              
              Next, we use a function expression to find document's whose `_id` property is in the `hotels` array. And build the join expression.
              
              ```csharp
              // Static variable of the class
              private static readonly IFunction JoinExpression = Function.ArrayContains(HotelsProperty, HotelIdProperty);

              // In the function
              var join = Join.DefaultJoin(hotelsSource).On(JoinExpression);
              ```
              
              Finally, the query object uses that join expression to find all the hotel document referenced in the "hotels" array of the bookmark document.
              
              ```csharp
              var query = Query
                  .Select(AllBookmarks, AllHotels)
                  .From(bookmarkSource)
                  .Joins(join)
                  .Where(TypeProperty.EqualTo("bookmarkedhotels"))
              ```

              And we use the `Run()` method to get the results back pass them on to the view.
              
              ```csharp
              using (var results = query.Run()) {
                  foreach (var result in results) {
                      bookmarkedHotels.Add(result.GetDictionary(HotelsDbName + ".").ToDictionary(x => x.Key, x => x.Value));
                  }
               }
              ```
               
              ## Try it out
              
              - Log into the Travel Sample Mobile app as "Guest" user by selecting "Proceed as Guest"
              - Tap on  "Hotels" button 
              - In the "Description" text field, enter "pets"
              - In the "Location" text field, enter "London"
              - Verify that you see the "Novotel London West" listed
              - Right click/tap on the hotel cell. The "Bookmark" button should appear.
              - Tap/click "bookmark" button
              - Tap/click "back" button
              - Verify that the Novatel hotel that you bookmarked earlier shows up in the list

              The screen recording is for UWP version of app
              ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/master/content/assets/uwp_join_query.gif)

      - title: Full Text Search
        milestones:
          - title: Full Text Search
            description: |
              Couchbase Lite 2.0 now supports Full Text Search (FTS). FTS is accomplished using the `match` query. FTS matches are case-insenstive. In the Travel App, the FTS query is against local pre-built "travel-sample" database.

              In order to do FTS queries, an FTS index must be created.
              
              **Open the file** `LoginModel.cs`. We will review the method `CreateDatabaseIndexes`. This code snippet creates an FTS index on the property named `description`.
              
              [LoginModel.cs](https://github.com/couchbaselabs/mobile-travel-sample/blob/master/dotnet/TravelSample/TravelSample.Core/Models/LoginModel.cs#L88-L101)
              
              ```csharp
              private void CreateDatabaseIndexes(Database db)
              {
                  ...

                  db.CreateIndex("description",
                      Index.FTSIndex().On(FTSIndexItem.Expression(Expression.Property("description"))));
                  
                  ...
              }
              ```
              
              Next you will write an FTS query that uses the index.
              
              **Open the file** `HotelListModel.cs`. You will review the `FetchHotelsFromLocalAsync` method.
              
              [HotelListModel.cs](https://github.com/couchbaselabs/mobile-travel-sample/blob/master/dotnet/TravelSample/TravelSample.Core/Models/HotelListModel.cs#L133)

              ```csharp
              private Task<Hotels> FetchHotelsFromLocalAsync(string description, string location) {
                ...
              }
              ```
              
              First, you will create an FTS `Expressions` using the `Match()` operator.  In this particular example, the `match` expression looks for the `desciptionStr` value in the `description` property. This `Match` expression is logically ANDed with an `EqualTo` comparison expression which looks for the `location` in the `country`,`city`,`state` or `address` properties. This expression is then used in the `Where` clause of the query the usual way.
              
              ```csharp
              IExpression descExp = null;
              if (!String.IsNullOrWhiteSpace(description)) {
                  descExp = DescriptionProperty.Match(description);
              }
              
              
              var locationExp = CountryProperty.Like($"%{location}%")
                  .Or(CityProperty.Like($"%{location}%"))
                  .Or(StateProperty.Like($"%{location}%"))
                  .Or(AddressProperty.Like($"%{location}%"));
              
              var searchExp = locationExp;
              if (descExp != null) {
                  searchExp = descExp.And(locationExp);
              }
              
             
              using (var hotelSearchQuery = Query
                  .Select(SelectResult.All())
                  .From(DataSource.Database(UserSession.Database))
                  .Where(TypeProperty.EqualTo("hotel").And(searchExp))) {
                  ...
              }
              ```
              
              We build the query using the different expressions from above and transform the `ResultSet` object into a `List` object that is passed to the `ListView`.
              
              ```csharp
              using (var results = hotelSearchQuery.Run()) {
                  var hotels = results.Select(x => x.GetDictionary(0).ToDictionary(y => y.Key, y => y.Value) as Hotel).ToList();
                  return Task.FromResult(hotels);
              }
              ```
              
              ## Try it out
            
              - Log into the Travel Sample Mobile app as “demo” user and password as “password”
              - Tap on "hotels" button
              - In the description text field enter “Pets.
              - In the Location text field enter "London"
              - Verify that you see one hotel listed named "Novotel London West"

              The screen recording is for UWP version of the app
              ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/master/content/assets/uwp_fts_query.gif)
