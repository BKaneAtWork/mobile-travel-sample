requirements: |
  - Xcode 8 (Swift 3)
chapters:
  - title: Installation
    lessons:
      - title: Installation
        milestones:
          - title: Pre-requisites
            description: |
              To start, it is easiest if you run all the components on the same machine. It's not required to run your development environment this way, and advanced configurations are discussed in the Deploy section but it is more convenient to start a development environment with components running locally.  
              
              ### iOS (Xcode 8.3.3 and above) 
              - Downloadable from [Apple Developer site](https://developer.apple.com)
                
              ### Python (V 2.7 and above)
              - Downloadable from [python.org](https://www.python.org/downloads/)
              
              ### git
              - Downloadable from [git-scm.org](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)
              
              ## Try it out
              
              - Open Xcode
              - Verify python installation
                - Run the following command from your terminal command line
                ```bash
                python --version
                ```
                You should see the version of python displayed
              - Verify git installation
                - Run the following command from your terminal command line
                ```bash
                git --version
                ```
                You should see the version of git installed
          - title: Travel Sample Mobile App
            description: |
              - Clone the app from GitHub and switch to the `connect_sv` branch
              ```bash
              git clone https://github.com/couchbaselabs/mobile-travel-sample.git
              git checkout -b connect_sv
              ```
              - Run the `install.sh` script to download and install the 2.0 version of Couchbase Lite.
              ```bash
              cd /path/to/mobile-travel-sample/ios/TravelSample
              sh install.sh
              ```
              
              ## Try it out
              
              - Open the `TravelSample.xcodeproj` using Xcode
              - Build and run the project using simulator 
              - Verify that the login screen appears in the simulator
          - title: Couchbase Server v5.0
            description: |
              In this step, you will install and launch version 5.0 of the Couchbase Server.
              - [Download and install](https://www.couchbase.com/downloads#couchbase-server) V5.0 of Couchbase Server
              - As you follow the download instructions and setup wizard, make sure you keep all the services (data, query, and index) selected.
              
                ![](https://cl.ly/1o3H0t3f0d1n/cbs-services.png)
              
              - Install the sample bucket named *travel-sample* because it contains the data used in this tutorial. 
                - If you have a previous installation of the server without this bucket, you can add the bucket from the "Sample Buckets" tab in the "Settings" menu in the admin console 
        
                  ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/assets/sample_bucket.png)
        
              - Launch Couchbase Server 
              - Log into the "Admin Console" with appropriate Administrator credentials you created during installation
              - Create an RBAC user named **admin** with password **password** and **full access** to the travel-sample bucket. The same user credentials will be used in the configuration file ([sync-gateway-config-travelsample.json](https://github.com/couchbaselabs/mobile-travel-sample/blob/master/sync-gateway-config-travelsample.json)) for Sync Gateway to access the documents in this bucket.
            
                  ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/assets/RBAC_user.png)
        
              - Create a Full text search index on travel-sample bucket called 'hotels'
        
                ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/assets/fts.png)
        
              ## Try it out
              
              - Launch Couchbase Server 
              - Log into the "Admin Console" with appropriate Administrator credentials you created during installation
              - Select the "Buckets" option from the menu on the left
              - Verify that you have 31,665 documents in your travel-sample bucket       
          - title: Travel Sample Web App (Python)
            description: |
              We will use the Python version of the [Travel Sample Web Backend ](https://developer.couchbase.com/documentation/server/current/sdk/python/sample-app-backend.html) which uses the Couchbase Python SDK to with with Couchbase Server Query Services.
        
              - Install `libcouchbase` which is the Core C SDK used by the Python SDK
                - Follow instructions [here](https://developer.couchbase.com/server/other-products/release-notes-archives/c-sdk) to install libcouchbase on your platform of choice
        
              - Clone the Travel Sample web app repo and checkout the 5.0 branch
              ```bash
              git clone https://github.com/couchbaselabs/try-cb-python.git
              git checkout 5.0
              ```
              - The application uses several Python libraries that need to be installed, this are listed in requirements.txt and can be automatically loaded using the pip command
              ``` bash
              cd /path/to/try-cb-python
              pip install -r requirements.txt
              ```
        
              - Update the travel.py file to reflect the username and password that you have used during Couchbase Server install. This defaults to "Administrator" and "password"
              ``` python
              DEFAULT_USER = "Administrator"
              PASSWORD = 'password' 
              ```
        
              ## Try it out
              
                - Launch the Travel Sample web application by running the travel.py file from a terminal. It will tell you the port on localhost to goto in your web browser
                  ``` bash
                  python travel.py
                  * Running on http://localhost:8080/ (Press CTRL+C to quit)
                  ```
                - Open http://localhost:8080/ in your web browser
                - Verify that you see the login screen of the Travel Sample Web App as shown below
                  ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/assets/try_cb_login.png)
          - title: Sync Gateway v1.5
            description: |
              - Install Sync Gateway 1.5 from [download](https://www.couchbase.com/downloads) v1.5 of Sync Gateway on platform of choice
              - Launch the Sync Gateway with the config file named `sync-gateway-config-travelsample.json` that you should have downloaded from the Travel Sample Mobile App Github repo
              ```bash
              cd /path/to/syncgatewayinstall/bin
              ./sync_gateway cd /path/to/mobile-travel-sample/ios/TravelSample/sync-gateway-config-travelsample.json
              ```
              
              ## Try it out
              
              - Access this URL `http://localhost:4985/travel-sample` in your browser
              - Verify that you get back a JSON response
          - title: Docker
            description: |
              In this section, you will learn how to run the components in Docker containers. Before getting started, first make sure that you have an instance of Couchbase Server 5.0 running locally (follow the steps in the [Couchbase Server v5.0](/develop/java#/0/0/2) lesson).
              
              ## Python Web App
              
              To run the application in a container, you will first get the docker image from Docker Cloud. Open a new terminal window and run the following.
              
              ```bash
              $ docker push jamiltz/try-cb-python
              ```
              
              Once the command has completed you can start the application with the following.
              
              ```bash
              $ docker run -it -p 8080:8080 try-cb-python
              ```
              
              You should then see the following in the logs.
              
              ```bash
              Connecting to: couchbase://docker.for.mac.localhost/travel-sample?username=Administrator
               * Running on http://0.0.0.0:8080/ (Press CTRL+C to quit)
              ```
              
              You can now run the Android app which will connect to the Python Web App to retrieve hotel documents.
              
              ![](https://cl.ly/3i3I3O1B0G1j/hotels-guest.gif)
              
              ## Docker Compose
            
              In this section, you will learn how to run all 3 components in Docker containers. The different container names are:
              
              - **sync-gateway**: running with the configuration file.
              - **web**: the Python web client which is the existing web application.
              - **couchbase**: running an instance of Couchbase Server 5.0.
              
              Open **docker-compose.yaml**, it should contain the following:
              
              ```yaml
              web:
                build: ./try-cb-python
                ports:
                  - '8080:8080'
                links:
                  - syncgateway
              syncgateway:
                image: couchbase/sync-gateway
                command: sync-gateway-config.json
                ports:
                  - '4984:4984'
              couchbaseserver:
                image: 'couchbase/server'
                ports:
                  - '8091:8091'
              ```
              
              You will now use Docker compose to run all 3 components from a single command.
              
              ```bash
              docker-compose up
              ```
              
              And you see the following.
              
              ![](https://cl.ly/470H3j1y371N/logs.png)
              
              Notice how the logs from Sync Gateway (in blue) and from the Web app (in yellow) are aggregated.
  - title: Design
    lessons:
        - title: Data Modeling
          milestones:
          - title: Introduction
            description: |
              Progressive disclosure of the data model in the travel sample bucket and the guest bucket. The Travel Sample bucket is synchronized between the mobile clients and the Couchbase Server. The guest bucket is a local-only database that is embedded in the mobile client.
                
                In this lesson you will learn how to model the data for an application and the relationships between the different models.
                
                Couchbase stores data in documents rather than in table rows. A document is a JSON object containing a number of key-value pairs that are typically correlated. This means that it can take any form as long as it is valid JSON. The following represents the same schema as the table above but in JSON format.
               
                ### Travel Sample Bucket
                
                The Travel Sample Bucket hosts the following types of documents
                  
                - airline
                - airport
                - hotel
                - route
                - landmark (not used in apps)
                - user Document (created and managed by user)
                
                Except for the user document, most of the documents are static/semi-static in nature. 
              
                ![](https://cl.ly/40330Z0M1k3F/models.png)
                
                
                ### Guest Bucket
                
                The guest database is used as a local-only store within the Travel Sample Mobile app. It is a simple database for locally storing the list of bookmarked hotels. 

                It is conceivable that in a real-world application, a user of the Travel Sample Mobile app may be interested in browsing for hotels in specific locations meeting specific search criteria without having to actually sign up. They could bookmark these hotels and later add them to their trips reservations. These bookmarked hotels could also be shared with other users, for instance with the user making the trip bookings.

                The Guest Bucket hosts the following types of documents
                  
                - bookmarkedhotels 
                - hotel
               
              
                ![](https://cl.ly/2l0118183p11/guest-model.png)
          - title: Document Types
            description: |
              Unlike tables, in Couchbase, all the documents are stored in the same namespace. So you typically use an additional property to differentiate between each entity. Let’s call it "type"
              ![](https://cl.ly/3K0a0K3P0v0k/document-types.gif)
              
              ## Try it out
              
              - Log into the "Admin Console" of Couchbase Server with appropriate Administrator credentials you created during installation
              - Select the "buckets" option from menu on left
              - Click on "Documents" under the travel-sample bucket
              - Search for document with ID "hotel_10025"
              - Verify that the "type" property of the document is "hotel"

          - title: Document Key/ID
            description: |
              Every document in Couchbase is associated with a unique key that must be provided by the user when the document is created. The key is the unique identifier of the document and can take any format. However, it is recommended that you give it a value that provides some context about the contents of the document.
              For instance, in the travel app data set, the document Key/ID is of the format `{doc.type}_{alphanumeric_string}`. Here `{doc.type}` provides some context of the purpose of the document and in combination with the `{alphanumeric_string}`, it uniquely identifies the string.
              The document Key will be listed as “ID” on Couchbase Server admin console. The key is also referred to as the Document ID.
              
              ![](https://cl.ly/0K3V1q3m3K1Z/admin-ui.png)
              
              ## Try it out
              
              - Log into the "Admin Console" of Couchbase Server with appropriate Administrator credentials you created during installation
              - Select the "buckets" option from the menu on the left 
              - Click on "Documents" under the travel-sample bucket
              - Search for document with ID "airline_137"
              - Verify that the "callsign" property of the document is "AIRFRANS"

          - title: Document _id
            description: |
              When Sync Gateway processes a document, it adds relevant metadata to the document. The metadata includes an "_id" property that corresponds  to the document ID. You will see this property if you query for the document via the the Sync Gateway REST API.
              
              ```json
              {
                  "_id": "airline_137",
                  "_rev": "1-b4e60280a1a0e3d46efad7bfd0e2068c",
                  "callsign": "AIRFRANS",
                  "country": "France",
                  "iata": "AF",
                  "icao": "AFR",
                  "id": 137,
                  "name": "Air France",
                  "type": "airline"
              }
              ```
              
              Mobile App Developers using Couchbase Lite  should typically never have to directly read or write the _id property. You would query the meta().id field to fetch the document ID. We will learn more about this in our lesson on Queries.

              ## Try it out
              
              - Confirm that the sync gateway is running
              - Run the following `curl` command on your terminal
              ```bash
              curl -X GET http://localhost:4985/travel-sample/airline_137
              ```
              - Confirm that "_id" property is "airline_137"


          - title: Entity relationships
            description: |
              TODO
          - title: Blobs
            description: |
              TODO
  - title: Develop
    lessons:
      - title: MVP Architecture
        milestones:
          - title: Overview
            description: |
              ### The Model-View-Presenter pattern
              
              In our app, we follow the MVP pattern, separating the internal data model, from a passive view through a presenter that handles the logic of our application and acts as the conduit between the model and the view.
              
              ![](https://cl.ly/073D0j3K1d1P/92ec579c7c197eb1.png)
              
              #### Protocols
              In the Travel app, we define two sets of protocols. The `PresenterProtocol` protocol that must be implemented by all Presenter objects and `PresentingViewProtocol` must be implemented by the corresponding "view" objects. 
              The `PresenterProtocol` and `PresentingViewProtocol` may be optionally extended to support capabilities of specific presenter/view 
             
              The app defines following PresenterProtocols that extend the PresenterProtocol` protocol 
              - _BookingPresenterProtocol_ defines methods to be implemented by the Booking Presenter
              - _FlightPresenterProtocol_ defines methods to be implemented by the Flight Presenter
              - _AirportPresenterProtocol_ defines methods to be implemented by the Airport Presenter
              - _HotelPresenterProtocol_ defines methods to be implemented by the Hotel Presenter

              The app defines following PresentingViewProtocols that extend the PresentingViewProtocol` protocol 
              - _BookingPresentingViewProtocol_ defines methods to be implemented by the Booking View 


              #### Model
              
              The model provides and stores the internal data. In our travel app, for simplicity, we use standard data types of `Dictionary` and `Array` to represent the data. In a real application, one would use a custom  object to represent the model. 
              
              The app implements the following models
              - _Booking_ which represents a flight reservation
              - _Flight_ which represents airline details
              - _Airport_ which represents airport name
              - _Hotel_ which represents hotel details

              In addition, the `DatabaseManager.swift` is a singleton class that is used to manage the common database operations such as Database Creation/Deletion and Replication.
              
              
              #### View
              
              In the Travel app, the  `UIView` and the `UIViewController` classes represent the "view" in MVP. It handles user input and forwards requests to the Presenter. It updates the UI based on response from the Presenter. The view object holds a weak reference to the corresponding Presenter object that implements the corresponding `PresenterProtocol`.
              
              The app implements the following ViewControllers
              - _LoginViewController_ which represents the login UI
              - _BookmarkedHotelsTableViewController_ which represents the UI that lists bookmarked hotels
              - _BookingTableViewController_ which represents the flight reservations UI
              - _FlightListingTableViewController_ which represents the UI that lists of flight details
              - _FlightSearchViewController_ which represents flight search UI
              - _HotelsTableViewController_ which represents the UI that lists hotels
              - _HotelDetailViewController_ which represents the UI that lists hotel details
              
              In addition, there are custom UITableViewCells 

               
              #### Presenter
              
              The Presenter acts as the intermediary between the View and the Model. It holds a weak reference to the corresponding view object that implements appropriate `PresentingViewProtocol`.


              The app implements the following Presenters
              - _BookingPresenter_ which implements the  `BookingPresenterProtocol`
              - _FlightPresenter_ which implements the  `FlightPresenterProtocol`
              - _AirportPresenter_ which implements the  `AirportPresenterProtocol`
              - _HotelPresenter_ which implements the `HotelPresenterProtocol`
                   
              In addition, there are some simple custom UI widgets like custom UITableViewCells 

      - title: The Basics
        milestones:
          - title: Create a Database
            description: |
              There is no limit to how many databases can be created or opened on the device. You can think of a database as a namespace for documents and several databases can be used in the same app (one database per user of the app is a common pattern).
              The code snippet can be found in the DatabaseManager.swift file in the [openOrCreateDatabaseForGuest](https://github.com/couchbaselabs/mobile-travel-sample/blob/master/ios/TravelSample/TravelSample/Model/DatabaseManager.swift#L72) function.
              The snippet below creates an empty database for `guest` user.       
              ```swift
              // This code can be found in DatabaseManager.swift file
              // in the openOrCreateDatabaseForGuest() function
        
              // Setup Database Configuration
              var options = DatabaseConfiguration()
              guard let defaultDBPath = _applicationSupportDirectory else {
                    fatalError("Could not open Application Support Directory for app!")
                    return
                }
                // Create a folder for Guest Account if one does not exist
                let guestFolderUrl = defaultDBPath.appendingPathComponent("guest", isDirectory: true)
                let guestFolderPath = guestFolderUrl.path
                let fileManager = FileManager.default
                if !fileManager.fileExists(atPath: guestFolderPath) {
                    try fileManager.createDirectory(atPath: guestFolderPath,
                                                    withIntermediateDirectories: true,
                                                    attributes: nil)
                    
                }
                
                options.directory = guestFolderPath
                // Create / Open Database with specified options
                _db = try Database(name: kGuestDBName, config: options)
              ```
              
              ## Try it out
              
              - Build and Run the Travel Sample Mobile App
              - On Login screen select “Proceed as Guest” option. 
              - This will log you into app in Guest Mode. Signing in as Guest will create a new empty  database for “guest” account if one does not exist
              - Confirm that you see the “Bookmarked Hotels” page. It will be empty the very first time.
          - title: Create a Document
            description: |
              In Couchbase Lite, the primary entity stored in a database is called a document instead of a "row" or "record". A document's body takes the form of a JSON object — a collection of key/value pairs where the values can be different types of data such as numbers, strings, arrays, dates, blobs or even nested objects. 
              
              The code snippet can be found in the HotelPresenter.swift file in the [bookmarkHotels](https://github.com/couchbaselabs/mobile-travel-sample/blob/connect_sv/ios/TravelSample/TravelSample/Presenter/HotelPresenter.swift#L36) function.
              The snippet creates a new _"bookmarkedhotels"_ document if one does not exist. The first time a hotel is bookmarked, the _"bookmarkedhotels"_ document is created with the "hotels" property holding the bookmarked hotel Id. For every hotel Id that is added to the "hotels" property array in the _"bookmarkedhotels"_ document, the corresponding "hotels" document containing details of the hotel is added to the database. 
              For brevity, the following code snippet only shows the creation of the _"bookmarkedhotels"_ document. The creation/addition of hotel document would be similar.
              
              ```swift
             
                // get existing "BookmarkedHotels" document if one exists
                var document = try fetchGuestBookmarkDocumentFromDB(db)
                         
                if document == nil {
                    // First time bookmark is created for guest account
                    // Create document of type "bookmarkedhotels"
                    document = Document.init(dictionary: ["type":"bookmarkedhotels","hotels":[String]()])               
                }
                // .... trimming other app logic code   ....
        
                if let document = document {
                    // add the Id of the bookmarked hotel to the "hotels" property 
                    document.setArray(bookmarked, forKey: "hotels")
        
                   // Save the "bookmarkedhotel" document in database    
                   try db.save(document)
                                
                   // ....trimming other app logic code ......   
               }
              ```
              
              ## Try it out
              
              - As Guest User, tap on “hotels” button
              - In "location" text field , enter "London"
              - You will see list of hotels. 
              - The list of hotels is pulled from the Couchbase Server via the Travel Sample Web Services API. The list of hotels is not displayed unless there is an open connection the python web app so make sure you have your Travel Sample Web app running
              - Swipe right on the first hotel cell
              - You will get option to  “Bookmark” 
              - Tap “bookmark”
              - This should display a "bookmark" icon on the hotel cell
              - Tap "Cancel" button
              - Verify that you see the bookmarked hotel in the “Bookmarked Hotels” screen. A motivation for having separate docs for each bookmarked hotel is if they become sharable between users via the sync function.
              
              ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/assets/basics_add_document.gif)
          - title: Update a Document
            description: |
              To update a document, you must retrieve it from the database, modify the desired properties and write them back to the database. The update method does this operation for you in the form of a callback.            
              The code below updates the list of bookmarked hotel Ids in the "hotels" property of the _"bookmarkedhotels"_ document. The first time a hotel is bookmarked, the _"bookmarkedhotels"_ document is created. Subsequently, every time you bookmark a hotel, the hotel Id is added to "hotels" property of the _"bookmarkedhotels"_ document.
        
              The code snippet can be found in the HotelPresenter.swift file in the [bookmarkHotels](https://github.com/couchbaselabs/mobile-travel-sample/blob/connect_sv/ios/TravelSample/TravelSample/Presenter/HotelPresenter.swift#L36) function.
              
              ```swift
              // get existing "BookmarkedHotels" document if one exists
              var document = try fetchGuestBookmarkDocumentFromDB(db)
                     
              // ....trimming other app logic code ...... 
    
              // Update the bookmarked list with the Ids of hotels
              var bookmarked = document?.array(forKey: "hotels")
                        
              // Ideally have an API that would append elements of a native array to existing ArrayObject
              for newId in newlyAddedIds {
                   bookmarked = bookmarked?.addString(newId)
              }
                        
              if let document = document {
                // Update and save the bookmark document
                document.setArray(bookmarked, forKey: "hotels")
                try db.save(document)
                   
                // ....trimming other app logic code ...... 
              }
              ```
              
              ## Try it out
              
              - Follow the steps in [Create a Document](/develop/swift#/2/0/0) section
              - As Guest User, tap on “hotels” button
              - In "location" text field , enter "London"
              - You will see list of hotels. 
              - Verify that the first hotel in the list is bookmarked. If not, make sure you follow instructions in [Create a Document]() section.
              - Swipe right on the second hotel cell
              - You will get option to  “Bookmark” 
              - Tap “bookmark”
              - This should display a "bookmark" icon on the hotel cell
              - Tap "Cancel" button 
              - Verify that you see two bookmarked hotels in the “Bookmarked Hotels” screen

              ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/assets/basics_update_document.gif)
         
          - title: Delete a Document
            description: |
              A document can be deleted using the `delete` method. This operation actually creates a new `tombstoned` revision in order to propagate the deletion to other clients.
              
              The code below deletes the "hotels" document from the database every time a hotel is unbookmarked. The unbookmarking process removes the hotel Id from the "bookmarkedhotels" document and deletes the unbookmarked "hotels" document from the database. 
       
              The code snippet can be found in the HotelPresenter.swift file in the [unbookmarkHotels](https://github.com/couchbaselabs/mobile-travel-sample/blob/connect_sv/ios/TravelSample/TravelSample/Presenter/HotelPresenter.swift#L124) function.
              
              ```swift
                  if let doc = db.getDocument(idOfDocToRemove) {
                     try db.delete(doc)
                  }
              ```
               
              ## Try it out
              
              - Follow the steps in [Update a Document]() section
              - Confirm that you see two bookmarked hotels in the "Bookmarked Hotels" screen. If not, make sure you go through the instructions in [Update a Document]() section 
              - Swipe right on first Hotel cell
              - You will get option to  “UnBookmark” 
              - Tap “unbookmark”
              - Verify that you see a single hotel in the list

               ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/assets/basics_delete_document.gif)
             
      - title: Sync
        milestones:
          - title: Channels/Data Routing
            description: |
              In this lesson you’ll be introduced to Sync Gateway, our secure web gateway. You’ll learn how to use Couchbase Lite’s synchronization APIs, set up Sync Gateway for synchronization with the cloud and other devices.
              
              Now that your application runs smoothly on the device you are ready to introduce Sync Gateway. Create a new file called **sync-gateway-config.json** with the following.
              
              ```javascript
              {
                "interface":":4984",
                "log": ["*"],
                "databases": {
                  "travel-sample": {
                    "import_docs": "continuous",
                    "unsupported": {
                      "enable_extended_attributes": true,
                      "replicator_2":true
                    },
                    "bucket":"travel-sample",
                    "server": "http://localhost:8091",
                    "username": "admin",
                    "password": "password",
                    "users":{
                        "admin": {"password": "password", "admin_channels": ["*"]}, 
                        "demo": {"password": "password"},
                        "tester": {"password": "password"}
                    }
                  }
                }
              }
              ```
            
            
              Describe contents of travel sample sync gateway config file. Explain “channels”. Describe how the user document is routed to specific channel.
          
          - title: XAttrs
            description: |
              TODO Describe the new XAttrs for convergence

          - title: Pull Replication
            description: |
              
              Pull Replication is the process by which clients running Couchbase Lite download database changes from the remote (server) source database to the local target database.
              
              Couchbase Mobile 2.0 introduces a brand new replication protocol which is implemented over the BLIP messaging protocol layered over WebSocket. 
              ![](https://blog.couchbase.com/wp-content/uploads/2017/08/layered.png)
              
              The replication process can be “continuous” or “one shot“.
              - In “Continuous” replication mode, the changes are continually synchronized between the client and Sync Gateway.
              
              - In “One shot” mode, the changes are synchronized once and the connection between the client and server disconnects. When any future changes need to be pushed up or pulled down, the client must start a new replication. 

              The code snippet can be found in the DatabaseManager.swift file in the [startPushAndPullReplicationForCurrentUser](https://github.com/couchbaselabs/mobile-travel-sample/blob/connect_sv/ios/TravelSample/TravelSample/Model/DatabaseManager.swift#L202) function.
              ```swift
                var config = ReplicatorConfiguration(database: db, targetURL: dbUrl)
                config.replicatorType = .pushAndPull
                config.continuous = true
                config.authenticator = BasicAuthenticator(username: user, password: password)
                
                // This should match what is specified in the sync gateway config
                // Only pull documents from this user's channel
                let userChannel = "channel.\(user)"
                config.channels = [userChannel]
                _pushPullRepl = Replicator.init(config: config)
                
                _pushPullReplListener = _pushPullRepl?.addChangeListener({ [weak self] (change) in
                    let s = change.status
                    print("PushPull Replicator: \(s.progress.completed)/\(s.progress.total), error: \(String(describing: s.error)), activity = \(s.activity)")
          
                    if s.progress.completed == s.progress.total {
                        self?.postNotificationOnReplicationState(.idle)
                    }
                    else {
                        self?.postNotificationOnReplicationState(s.activity)
                    }
                })
                
        
                 _pushPullRepl?.start()
              ```
               
              ## Try it out
              
              - Log into the Travel Sample Mobile app as “demo” user and password as “password”
              - Log into Travel Sample Web App as “demo” user and password as “password”
              - Make a flight reservation by clicking "booking" button.
              - Enter “From” airport as “SFO” and select the airport from drop down menu.
              - Enter “To” airport as “JFK” and select the airport from drop down menu.
              - Enter From and Return Travel Dates.
              - Select the first flight listing.
              - Confirm the booking by clicking shopping cart icon and select “Book” button.
              - As soon as the flight reservation is confirmed via the web app, you should see the flight listing in the mobile app.
          - title: Push Replication
            description: |
              Show code snippet
              
              ## Try it out
              
              - Log into the Travel Sample Web app as “demo” user and password as “password”
              - Log into the Travel Sample Mobile app as “demo” user and password as “password”
              - Tap on  ‘+” button to make a flight reservation
              - Enter “From” airport as “DTW” and select the airport from drop down menu
              - Enter “To” airport as “SFO” and select the airport from drop down menu
              - Enter From and Return Travel Dates
              - Select the first flight listing
              - Select “Confirm Booking” 
              - As soon as the flight reservation is confirmed via the mobile app, you should see the flight listing in the web app
          - title: Web client
            description: |
              Starting with Sync Gateway 1.5 and Couchbase Server 5.0, mobile and server application now have the ability to read and write to the same bucket. It is an opt-in feature can be enabled in the Sync Gateway configuration file.
              
              The following configuration settings in the Sync Gateway config file enables the import.
              
              ```javascript
              "unsupported": {
              	"enable_extended_attributes": true
              }
              ```
              
              ## Try it out
              
              - Log on the mobile with your credentials.
              - Place a new flight booking from mobile app.
              - Switch back to the user profile page.
              - You should see the same flight booking displayed on the web client.
      - title: Security
        milestones:
          - title: User Management
            description: |
              User is created via the Travel sample web app. When user is created, a corresponding user profile document is created on Couchbase Server.
            
              ## Try it out
              
              - Launch travel sample web app at [http://localhost:8080](http://localhost:8080).
              - Create a new user by entering "demo" as the username and "password" for the password. Make sure the "create new user" checkbox is selected.
              - You should be logged into the web app. There should be nothing created for the user.
              - Try it out 2
              - Open Couchbase Server at [http://localhost:8091](http://localhost:8091).
              - Log in with Administrator credentials that you set up during the installation of Couchbase Server.
              - In the search box, enter "user:demo".
              - You should see the user document that was created when you signed up via the web app.
              - Enter the values you see in the "username" and "password" in the text fields below.
          - title: Access Control
            description: |
              Describe contents of travel sample sync gateway config file. Explain hardcoded users “Users”, “channels”. Describe how the hardcoded users relate to the web user created in previous step.
            
              ## Try it out
            
              - Run HTTP GET request on sync gateway to fetch users
              - List the users that are returned in text box below
              - How it relates to the web user.
          - title: User Authentication
            description: |
              todo
            
              ## Try it out
            
              - Log into the Travel Sample Mobile App as “demo” user with password as “password”
          - title: Encryption
            description: |
              todo
              
              ## Try it out
              
              - enable encryption on the mobile travel sample app.
          - title: Key Management
            description: |
              todo
              
              ## Try it out
              
              - Enable encryption.
              - Find the underlying database file (using `adb pull` on Android and the app support folder on iOS).
              - Verify the database file is indeed encrypted (using a sqlite tool from the command line on macOS/windows).
              - Best Practices
      - title: Pre-built database
        milestones:
          - title: Starting with Prebuilt Database
            description: |
              In this section, you will learn how to bundle a pre-built Couchbase Lite database in an application. It can be a lot more efficient to bundle static or semi-static content database in your application and install it on the first launch. Even if some of the content changes on the server after you create the app, the app's first pull replication will bring the database up to date.
              Here, you will use a pre-built database that contains only airport and hotel documents. The code below moves the pre-built database from the bundled location to the Application Support directory.
              
              Open DatabaseManager.swift and navigate to the [openOrCreateDatabaseForUser](https://github.com/couchbaselabs/mobile-travel-sample/blob/master/ios/TravelSample/TravelSample/Model/DatabaseManager.swift#L72) method. This method first checks if a database file already exists. If it doesn't exist it loads the database from the app bundle.
              
              ```swift
               if Database.exists(kDBName, inDirectory: userFolderPath) == false {
                // Load prebuilt database from App Bundle and copy over to Applications support path
                if let prebuiltPath = Bundle.main.path(forResource: kDBName, ofType: "cblite2") {
                     try Database.copy(fromPath: prebuiltPath, toDatabase: "\(kDBName)", config: options)
                    
                }
              ```
            
              ## Try it out
              
              - Log into the Travel Sample Mobile app as “demo” user and password as “password”
              - Tap on  "+” button to make a flight reservation
              - In the “From”  airport textfield, enter “San”
              - Confirm that the first item in the dropdown list of "San Diego Intl"

               ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/assets/ios_prebuilt.gif)
           
      - title: Query
        milestones:
         - title: Overview
           description: |
              Couchbase Lite 2.0 includes support for N1QL like query interface. Database can be queried by constructing a query using a Query builder  and then executing that query.

              The Query interface in Couchbase Lite 2.0 is poweful and includes support for the following among others
              - Pattern Matching 
              - Regex Matching
              - Math Functions
              - String Manipulation Functions
              - Aggregate Functions
              - Grouping
              - Joins (within single database)
              - Sorting
              - NilOrMissing properties

              #### Implementation Pattern
              The `select` clause and `where` clause in the `Query` statement require a `CouchbaseLite.Expression` type. Consider the following query 
              ``` swift
              let hotelSearchQuery = Query
                                    .select(SelectResult.expression(Expression.meta().id),
                                            SelectResult.expression(Expression.property("name"))) 
                                    .from(DataSource.database(db))
                                    .where(
                                        Expression.property("description").like("%\(descriptionStr)%")
                                        .and(Expression.property("type").equalTo("hotel"))
                                        .and(Expression.property("country").equalTo(locationStr)
                                            .or(Expression.property("city").equalTo(locationStr))
                                            .or(Expression.property("state").equalTo(locationStr))
                                            .or(Expression.property("address").equalTo(locationStr))))
 

              ```
              Often types, the same `Expression` may be required across multiple queries. This can quickly become tedious and difficult to maintain. The recommended pattern is to define constants corresponding to the Expressions and to reuse them across queries.

              Open the [QueryConsts.swift](https://github.com/couchbaselabs/mobile-travel-sample/blob/connect_sv/ios/TravelSample/TravelSample/Utilities/QueryConsts.swift) file. This file defines the CouchbaseLite expressions that are used in the Travel App
              ```swift
                struct _Property {
                    // Query: Property Expressions
                    static let DOCID        = Expression.meta().id
                    static let TYPE         = Expression.property("type")
                    static let USERNAME     = Expression.property("username")
                    static let FLIGHTS      = Expression.property("flights")
                    static let DESCRIPTION  = Expression.property("description")
                    static let NAME         = Expression.property("name")
                    static let COUNTRY      = Expression.property("country")
                    static let CITY         = Expression.property("city")
                    static let STATE        = Expression.property("state")
                    static let ADDRESS      = Expression.property("address")
                    static let FAA          = Expression.property("faa")
                    static let ICAO         = Expression.property("icao")
                    static let AIRPORTNAME  = Expression.property("airportname")
                }

                struct _SelectColumn {    
                    // Query: Select Results
                    static let NAMERESULT         = SelectResult.expression(_Property.NAME)
                    static let AIRPORTNAMERESULT  = SelectResult.expression(_Property.AIRPORTNAME)
                    static let FLIGHTSRESULT      = SelectResult.expression(_Property.FLIGHTS)
                    static let DOCIDRESULT        = SelectResult.expression(_Property.DOCID)
                    static let COUNTRESULT        = SelectResult.expression(Function.count(1))
                    static let ALLRESULT          = SelectResult.all()
                }

              ```



         - title: Simple Query
           description: |
              
              The travel app has many instances of querying the database. We will discuss a simple example here.

              Open AirportPresenter.swift and navigate to the [fetchAirportsMatching](https://github.com/couchbaselabs/mobile-travel-sample/blob/master/ios/TravelSample/TravelSample/Presenter/AirportPresenter.swift#L28) method. 
              The query below `selects` the "name"" property in documents `from` database `where` the "type"" property is equal to "airport" and the "FAA" property is equaly to the search string. 
           
          
              ```swift
              var searchQuery:Query?
              searchQuery = Query
                .select(_SelectColumn.AIRPORTNAMERESULT)
                .from(DataSource.database(db))
                .where(_Property.TYPE
                    .equalTo("airport")
                    .and(_Property.FAA
                    .equalTo(searchStr.uppercased())))
              ```
            
              Run the query and iterate over the results 
              
              ```swift
              if let searchQuery = searchQuery {
                var matches:Airports = []
                do {
                  for row in try searchQuery.run() {
                    if let match = row.string(forKey: "airportname") {
                        matches.append( match)
                    }
                  }
                handler(matches,nil)
              }
              catch {
                handler(nil,error)
              }          
              ```
          
              ## Try it out
              
              - Log into the Travel Sample Mobile app as “demo” user and password as “password”
              - Tap on  "+"" button to make a flight reservation
              - In the “From”  airport textfield, enter "DTW""
              - Verify that the first item in the drop down list is "Detroit Metro Wayne Co""

              ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/assets/ios_simple_query.gif)

         - title: Advanced Query 
           description: |
              In this section we will discuss the JOIN query. JOIN Queries in Couchbase Lite 2.0 are intra-database joins. 
              Open HotelPresenter.swift and navigate to the [fetchBookmarkedHotels](https://github.com/couchbaselabs/mobile-travel-sample/blob/connect_sv/ios/TravelSample/TravelSample/Presenter/HotelPresenter.swift#L184) method.
              
              If you recall from the Data Modeling section of "Hotels" bucket, the "bookmarkedhotels" document contains a "hotels" property which is an array of Ids of bookmarked hotels.
              
              The JOIN query in code snippet below fetches documents whose `Id` is included in the "hotels" property array in "bookmarkedhotels" type document.

              ```swift
               var bookmarkedHotels:Hotels = Hotels()
            
              // Set aliases
              let bookmarkDS = DataSource.database( db).as("bookmarkDS")
              let hotelsDS = DataSource.database(db).as("hotelsDS")
            
              let hotelsExpr = Expression.property("hotels").from("bookmarkDS")
              let hotelIdExpr = Expression.meta().id.from("hotelsDS")
            
              let joinExpr = Function.arrayContains(hotelsExpr, value: hotelIdExpr)
              let join = Join.join(hotelsDS).on(joinExpr);
            
              let typeExpr = Expression.property("type").from("bookmarkDS")
            
              let bookmarkAllColumns = _SelectColumn.ALLRESULT.from("bookmarkDS")
              let hotelsAllColumns = _SelectColumn.ALLRESULT.from("hotelsDS")
            
              let query = Query.select(bookmarkAllColumns, hotelsAllColumns)
                                .from(bookmarkDS)
                                .join(join)
                                .where(typeExpr.equalTo("bookmarkedhotels"));
            
           
              for result in try query.run() {
                if let hotel = result.toDictionary()["hotelsDS"] as? Hotel{
                      bookmarkedHotels.append(hotel)
                }
              }
               handler(bookmarkedHotels,nil)
              ```

              ## Try it out
              
              - Log into the Travel Sample Mobile app as "Guest" user by selecting "Proceed as Guest"
              - Tap on  "Hotels"" button 
              - In the "Description" text field, enter "pets"
              - In the "Location" text field, enter "London"
              - Verify that you see the "Novotel London West" listed
              - Swipe left to "bookmark" the hotel
              - Tap "Cancel" button
              - Verify that the Novatel hotel that you bookmarked earlier shows up in the list

              ![](https://raw.githubusercontent.com/couchbaselabs/mobile-travel-sample/connect_sv/content/assets/ios_join_query.gif)


      - title: Full Text Search
        milestones:
          - title: Full Text Search
            description: |
              Explain MATCH
              
              ## Try it out
            
              - Log into the Travel Sample Mobile app as “demo” user and password as “password”
              - In the description text field enter “Pets allowed”.
              - In the Location text field enter “France”
              - You will see list of hotels.
              - Enter the name of the first hotel you see in text field below
