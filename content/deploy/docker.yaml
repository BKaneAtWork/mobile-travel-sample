requirements: |
  TODO
chapters:
  - title: Deploy
    lessons:
      - title: Spin Up & Install
        milestones:
          - title: Couchbase Server
            description: |

              To deploy Couchbase Mobile to production you must first get familiar with Couchbase Server. While it's certainly possible to run Sync Gateway in isolation for quick and agile development and testing, any production deployment needs Couchbase Server as the backend. Luckily, connecting the two is incredibly easy. Even more luckily, both Couchbase Server and Sync Gateway are designed to be able to scale out easily and with zero downtime, meaning that we can start with a very small deployment and scale it up later to something that's production ready.

              In this lesson you'll learn how to deploy Couchbase Server on a cluster of machines. The workshop assumes you are using AWS EC2 instances for this, but any collection of machines should be fine with minimal adustment to the instructions - all Couchbase Specific instructions should not need any adaption.

              Couchbase Server can deployed on a whole host of [operating systems](http://www.couchbase.com/nosql-databases/downloads), but for this workshop we'll focus on using RHEL 7.


              ## Spin Up A Machine 

              1. If you're using AWS EC2, this should be as simple as clicking *Launch Instance*:

                ![]()

                Let's use the basic RHEL 7 AMI:

                ![]()

                For the instance type, we should really consider the [Sizing Recomendations](), however we probably don't want to be spinning up a lot of huge instances just for this workshop, so `t2.micro` should be fine for our purposes today.

                There's no other special steps we need at this point, so go head and click *TODO*.

              1. You'll be prompted to select a Key Pair, if you don't already have one you have access to (or like to keep things separate), create a new one which will download the appropriate `.pem` file.

              1. From the list of instances, select the instance we just launched make a note of the Public IP Address. We can then use this and the `.pem` from the previous step to `ssh` into our new instance:

                ```bash
                $ sudo chmod 600 ./Workshop_AWS.pem
                $ ssh ec2-user@123.123.123.123 -i ./Workshop_AWS.pem
                ```

              ### N.B. From here on, we'll use `$CB1` to represent this IP address to make following along easier.

              ## Install Couchbase Server

              1. Now we need to actually donwload Couchbase Server. This is as easy as running the following command:

                ```bash
                $ wget http://packages.couchbase.com/releases/5.0.0/couchbase-server-enterprise-5.0.0-centos7.x86_64.rpm
                ```

              1. Finally, install the package with `rpm`:

                ```bash
                $ sudo rpm -i couchbase-server-enterprise-5.0.0-centos7.x86_64.rpm
                TODO
                ```

              1. That's it, Couchbase Server is now running on this machine. We'll get into configuring it in the next lesson. For now, Llet's check the Couchbase Server instance by going to the IP Address (`$CB1`) and port `8091`, you should be greeted with this screen:

                ![](assets/welcome_wide.png)

          - title: Sync Gateway
            description: |
              Sync Gateway is the middleman server that exposes a database API for Couchbase Lite databases to replicate to and from. It connects internally to a Couchbase Server bucket to persist the documents. Again, in a production environment you would connect it to Couchbase Server, but for now let's concentrate on getting one started.

              As with the last section we'll assumes you are using AWS EC2 instances for this, but any collection of machines should be fine with minimal adustment to the instructions - all Couchbase Specific instructions should not need any adaption.

              The steps here are much the same as for Couchbase Server:

              ## Spin Up A Machine 

              1. If you're using AWS EC2, this should be as simple as clicking *Launch Instance*:

                ![]()

                Let's use the basic RHEL 7 AMI:

                ![]()

                For the instance type, we should really consider the [Sizing Recomendations](), however we probably don't want to be spinning up a lot of huge instances just for this workshop, so `t2.micro` should be fine for our purposes today.

                There's no other special steps we need at this point, so go head and click *TODO*.

              1. You'll be prompted to select a Key Pair, if you don't already have one you have access to (or like to keep things separate), create a new one which will download the appropriate `.pem` file.

              1. From the list of instances, select the instance we just launched make a note of the Public IP Address. We can then use this and the `.pem` from the previous step to `ssh` into our new instance:

                ```bash
                $ sudo chmod 600 ./Workshop_AWS.pem
                $ ssh ec2-user@123.123.123.123 -i ./Workshop_AWS.pem
                ```

              ### N.B. Similar to before, we'll use `$SG1` to represent this IP address to make following along easier.

              ## Install Sync Gateway Server

              1. Now we need to actually donwload Couchbase Server. This is as easy as running the following command:

                ```bash
                $ wget http://packages.couchbase.com/releases/couchbase-sync-gateway/1.5.0/couchbase-sync-gateway-enterprise_1.5.0_x86_64.rpm
                ```

              1. Finally, install the package with `rpm`:

                ```bash
                $ sudo rpm -i couchbase-sync-gateway-enterprise_1.5.0_x86_64.rpm
                TODO
                ```

              1. That's it, Sync Gateway is now running on this machine. We can check this easily either by using `curl` from the local machine (i.e. inside the `ssh` session):

                ```bash
                $ curl http://localhost:4984/

                {"couchdb":"Welcome","vendor":{"name":"Couchbase Sync Gateway","version":1.5},"version":"Couchbase Sync Gateway/1.5.0(594;e78dbf1)"}
                ```

              or by either opening the URL in a browser:

                ![](assets/sg_browser.png)

              1. Although we still need to configure Sync Gateway to connect to Couchbase Server, it's already running with the default config. That includes an in memory (`walrus:`) database called `db`. We can have a quick play with this to confirm everything is working as expected.


                * First, check the database is really there:

                  ```bash
                  $ curl http://localhost:4984/db/

                  {"committed_update_seq":1,"compact_running":false,"db_name":"db","disk_format_version":0,"instance_start_time":1507203061736649,"purge_seq":0,"state":"Online","update_seq":1
                  ```

                * Now let's check the changes feed:

                  ```bash
                  $ curl http://localhost:4984/db/_changes

                  {"results":[
                  {"seq":1,"id":"_user/","changes":[{"rev":""}]}
                  ],
                  "last_seq":"1"}
                  ```

                * Not too much there yet, but we can easily add some documents:

                  ```bash
                  $ curl -X PUT http://localhost:4984/db/test_doc -d '{"I am a document": "with a specific name"}' -H 'Content-type: application/json'

                  {"id":"test_doc","ok":true,"rev":"1-838820c27155617e58bef130c14a844a"}
                  ```

                  ```bash
                  $ curl -X POST http://localhost:4984/db/ -d '{"I am a document": "without a specific name", "could I please have": "a UUID?"}'

                  {"id":"d6e43b47392ca2e7941744931c250f51","ok":true,"rev":"1-71abb654c47904d0965ff5f1f6fafa72"}
                  ```

                  ```bash
                  $ curl http://localhost:4984/db/_changes?include_docs=true

                  {"results":[
                  {"seq":1,"id":"_user/","changes":[{"rev":""}]}
                  ,{"seq":2,"id":"test_doc","doc":{"I am a document":"with a specific name","_id":"test_doc","_rev":"1-838820c27155617e58bef130c14a844a"},"changes":[{"rev":"1-838820c27155617e58bef130c14a844a"}]}
                  ,{"seq":3,"id":"d6e43b47392ca2e7941744931c250f51","doc":{"I am a document":"without a specific name","_id":"d6e43b47392ca2e7941744931c250f51","_rev":"1-71abb654c47904d0965ff5f1f6fafa72","could I please have":"a UUID?"},"changes":[{"rev":"1-71abb654c47904d0965ff5f1f6fafa72"}]}
                  ],
                  "last_seq":"3"}
                  ```

              1. As we're connecting through `localhost`, you'll notice that Sync Gateway's Admin Port (`4984`) is accessible too:

                ```bash
                $ curl http://localhost:4985
                TODO
                ```

                By default, the port is only accessible from `localhost` - we could change this to make it a little easier to configure, but it wouldn't be the best security practice!

      - title: Configure
        milestones:
          - title: Configuring Couchbase Server
            description: |
              Now that we've got a Docker container running Couchbase Server, we need to configure it. There are a few options here, we can use the UI, the [REST API](), or the [CLI](). Let's start by looking at the UI as it gives a good sense of what we're doing and why.

              ## Configuring Couchbase Server using the UI
              1. Open the UI in a browser - this should be at http://$CB1:8091/ - and select *Setup New Cluster*

                ![](assets/welcome_focus.png)

              1. The next step is pretty self explanatory. You don't need to worry too much about the cluster name, but we'll be needing the credentials later. All the examples here are going to use `Administrator` and `password`, so use these yourself if you want to be able to copy and paste. If you're using Couchbase Mobile for anything more sensitive than this workshop, maybe try something a bit more secure!

                ![](assets/cluster_init.png)

              1. For the next step, you'll need to accept the Terms and Conditions, and then click *Configure Disk, Memory, Services* (we don't want the defaults in this case).

                ![](assets/terms_conditions.png)

              1. On this page, the only things we need to do are to disable the Index, Search, and Query Services. We don't need them for now, but there's always the opportunity to add them to the cluster later. Everything else is fine as it is - hit *Save & Finish*.

                ![](assets/node_init.png)

              1. Welcome to the Couchbase Server UI! You can see at the moment we have one node running the Data Service, and not much else going on - so let's add a bucket. Click *Buckets* on the left hand bar, then *ADD BUCKET* in the top right corner. In this case, we'll call our bucket `todo` and stick with the defaults for everything else. You can of course pick a different name for your bucket, but be aware that some of the examples in later lessons may need tweaking to match.

                ![](assets/main_ui.png)

                ![](assets/bucket_init.png)

              1. With the bucket created, the last bit of configuration we need to do on the Couchbase Server side is to create a user that Sync Gateway will authenticate with. That might sound like a bit of a strange concept - this isn't front end user, it's just going to be used by Sync Gateway itself. Starting in Couchbase Server 5.0, [Role Based Access Control]() is used to control access to all features and functions of the cluster, Sync Gateway therefore needs to authenticate against Couchbase Server just like any other client would. Click *Security* in the left hand bar, then *ADD USER* in the top right corner. We want to use `Couchbase` as the *Authenication Domain* in this workshop. As with the Administrator credentials, you can pick anything here, but if you want to copy and paste the credentials we will be using are `sg_user` and `rb4c_p4ssw0rd`.

                ![](assets/rbac_user.png)

              1. As for the roles themselves, we want to give `sg_user` the *Bucket Full Access* role for the `todo` bucket.

                ![](assets/rbac_role.png)

          - title: Configuring Sync Gateway

              Previously, we were able to access the Sync Gateway VM we set up and perform some CRUD operations against it; however we were only using a local, in-memory `walrus` instance as the backend. Now that we've got Couchbase Server set up, let's configure Sync Gateway to connect directly to it.

              1. First we need to ssh back into the machine running Sync Gateway. Once we're ssh'd in, we can first see the Admin API for the first time:

                ```bash
                $ curl localhost:4985

                {"ADMIN":true,"couchdb":"Welcome","vendor":{"name":"Couchbase Sync Gateway","version":1.5},"version":"Couchbase Sync Gateway/1.5.0(594;e78dbf1)"}
                ```

              1. With this API, we can check the current running config:

                ```bash
                $ curl localhost:4985/_config
                ```

                The output might be a bit awkward to read, but pretty-printed it should look something like this:

                ```json
                {
                  "Interface": "0.0.0.0:4984",
                  "AdminInterface": "127.0.0.1:4985",
                  "log": [
                    "HTTP+"
                  ],
                  "Databases": {
                    "db": {
                      "server": "walrus:data",
                      "pool": "default",
                      "bucket": "db",
                      "name": "db",
                      "users": {
                        "GUEST": {
                          "name": "",
                          "admin_channels": [
                            "*"
                          ],
                          "all_channels": null
                        }
                      }
                    }
                  }
                }
                ```

              1. In the config we can see that there is one Sync Gateway database defined: `db`. Let's add another! We could use the Admin REST API for this, but we really want the config to persist across reboots, so it's better to edit the config file on disk at `/home/sync_gateway/sync_gateway.json`. By default the VM won't have much choice in terms of editors, so if you'd rather not use `vi`, feel free to install something you're more comfortable with - the `ec2-user` user you're logged in as will have passwordless `sudo` access.

                `sync_gateway.json` will have a very similar structure to the output of the `_config` endpoint, but with fewer entries (many are added as defaults at runtime). We just need to add another database under the `databases` property. All the properties here should be reasonable self explanatory, but you can find the full list of options and descriptions in [our documentation](https://developer.couchbase.com/documentation/mobile/current/guides/sync-gateway/config-properties/index.html). The key thing to consider here is that the `server` property should be the **Internal IP Address** of the Couchbase Server node, not the one we were using to `ssh` into it earlier.

                ```json
                "todo": {
                  "server": "http://123.123.123.123:8091",
                  "bucket": "todo",
                  "username": "sg_user",
                  "password": "rb4c_p4ssw0rd",
                  "users": {
                    "GUEST": {"disabled": false, "admin_channels": ["*"] }
                  },
                  "import_docs": "continuous",
                  "enable_shared_bucket_access": true
                }
                ```

                The last two settings (`import_docs` and `enable_shared_bucket_access`) allow us to take advantage of the new features in Couchbase Server 5.0 and Sync Gateway 1.5. In short, this lets you use the [Couchbase SDKs](https://developer.couchbase.com/documentation/server/4.6/sdk/development-intro.html) to access the same data seemlessly.

                While we're here, let's up the logging output to `*` so we can see more of what's going on in the logs:

                ```json
                "log": ["*"]
                ```

                Before saving, it's worth doublechecking that the file is valid json - commas in particular! `python` has a nice way of doing this inside the VM - any errors will look something like this:

                ```bash
                $ sudo python -m json.tool /home/sync_gateway/sync_gateway.json
                Expecting , delimiter: line 3 column 2 (char 17)
                ```

              1. With the config file updated and syntax error free, we need to restart Sync Gateway to pick it up:

                ```bash
                $ sudo service sync_gateway restart
                ```

                Now when we check the `_config` endpoint, we should see the new database included:

                ```bash
                $ curl localhost:4985/_config -sS | python -m json.tool
                {
                    "AdminInterface": "127.0.0.1:4985",
                    "Databases": {
                        "db": {
                            "bucket": "db",
                            "name": "db",
                            "pool": "default",
                            "server": "walrus:data",
                            "users": {
                                "GUEST": {
                                    "admin_channels": [
                                        "*"
                                    ],
                                    "all_channels": null,
                                    "name": ""
                                }
                            }
                        },
                        "todo": {
                            "bucket": "todo",
                            "name": "todo",
                            "password": "rb4c_p4ssw0rd",
                            "pool": "default",
                            "server": "http://123.123.123.123:8091",
                            "username": "sg_user",
                            "users": {
                                "GUEST": {
                                    "admin_channels": [
                                        "*"
                                    ],
                                    "all_channels": null,
                                    "name": ""
                                }
                            }
                        }
                    },
                    "Interface": "0.0.0.0:4984",
                    "log": [
                        "*"
                    ]
                }
                ```

              1. We can confirm this in a couple of places. Firstly, we cang see that there's now a collection of `/todo/` endpoints (although not much in there yet):

                ```bash
                $ curl localhost:4984/todo/_all_docs
                {"rows":[
                ],
                "total_rows":0,"update_seq":1}
                ```

                We can also check and see that Sync Gateway has connected to Couchbase Server. If you go to the *Buckets* section, you can click *Documents* to view the contents of the `todo` bucket.

                ![](assets/todo_bucket.png)

                Here you should now see a handful of documents holding Sync Gateway's metadata:

                ![](assets/todo_docs.png)

              Congratulations! Sync Gateway is now configured with a Couchbase Server backend. At this point, you can start connecting apps and persisting the data to Couchbase Server. You've got the basis to build a robust production deployment - more about that in the next lesson!

      - title: Scale
        milestones:
          - title: Scaling Couchbase Server
            description: |
              Having one Couchbase Server node is all well and good, but for High Availability and improved performance, you'll need a cluster.
              Couchbase Server is designed to make this scaling incredibly easy; all you need are a few extra VMs running Couchbase Server and you can scale out the cluster straight from the UI.

              1. First, we'll need some more nodes. Follow the same process we did before to bring up two more machines and install Couchbase Server on them. Once this completes, you should see the familiar UI on those new nodes:

                ![](assets/welcome_focus.png)

              1. For the first node, let's add it to the cluster from here. First (as you might have guessed), click *Join Existing Cluster*. Here we want to specify the first node by it's **Internal IP Address**, which is the only node so far in the cluster we want to join, and the Administrator credentials we set earlier (`Administrator`, `password` if you're following along):

                ![](assets/join_cluster.png)

                Before we click through, we also want to only have the Data Service running on this node, we can do this in the same way we did last time under the *Configure Services & Settings For This Node* section:

                ![](assets/join_cluster_detail.png)

                Finally, click *Join With Custom Configuration*. You should be greeted with a very familiar UI, only now with 2 nodes:

                ![](assets/joined_cluster.png)

                It's worth noting at this point that you can access and administer the cluster from any of the nodes - you'll notice we're still on the second node.

              1. We've got one more node to add, let's do it from the cluster itself, rather than from the new node. Click the *Servers* section on the left hand bar, and you can now see the last node we added:

                ![](assets/pending_rebalance.png)

                As the message suggests, this needs Rebalancing into the cluster before it starts taking traffic, but let's wait until we've got both nodes ready before starting the rebalance.

              1. In the top right corner, click *ADD SERVER* and then fill in the **Internal IP Address** of the last node. As this node has not been initialised yet, it doesn't actually have Administrator credentials and we can ignore this. Again, let's add only the Data Service and finally click *Add Server*:

                ![](assets/add_node.png)

              1. Finally, start a rebalance with the *Rebalance* button and watch it progress.

                ![](assets/rebalancing.png)

                The key thing to note here is that everything is totally online. All data is available during the rebalance.

          - title: Scaling Sync Gateway
            description: |
              As with Couchbase Server, having on Sync Gateway running is fine, but you'll eventually want to scale out to ensure you have High Availability for a production deployment. Becuase of the way they're deployed and the functions they serve, Couchbase Server and Sync Gateway scale in different ways. Scaling Sync Gateway requires a Load Balancer in front of it, but as Sync Gateway is essentially stateless we don't need to worry about adding it to a cluster - only adding it behind the Load Balancer.

              1. First, we'll need some more nodes. Follow the same process we did before to bring up one more machine and install Sync Gateway on it.

              1. Once Sync Gateway is installed and running, we need to configure it in the same way as the first node. If we ssh into the current running Sync Gateway node, we can copy out the config we already modified in the last lesson:

                ```bash
                $ ssh ec2-user@$SG1 -i ./Workshop_AWS.pem
                $ sudo cat /home/sync_gateway/sync_gateway.json
                ```

              1. We can then update the config on the new node:

                ```bash
                $ ssh ec2-user@$SG2 -i ./Workshop_AWS.pem
                $ sudo vi /home/sync_gateway/sync_gateway.json
                ```


              1. With the config file updated and syntax error free, we need to restart Sync Gateway to pick it up:

                ```bash
                $ sudo service sync_gateway restart
                ```

                Now when we check the `_config` endpoint, we should see the new database included as before:

                ```bash
                $ curl localhost:4985/_config -sS | python -m json.tool
                {
                    "AdminInterface": "127.0.0.1:4985",
                    "Databases": {
                        "db": {
                            "bucket": "db",
                            "name": "db",
                            "pool": "default",
                            "server": "walrus:data",
                            "users": {
                                "GUEST": {
                                    "admin_channels": [
                                        "*"
                                    ],
                                    "all_channels": null,
                                    "name": ""
                                }
                            }
                        },
                        "todo": {
                            "bucket": "todo",
                            "name": "todo",
                            "password": "rb4c_p4ssw0rd",
                            "pool": "default",
                            "server": "http://123.123.123.123:8091",
                            "username": "sg_user",
                            "users": {
                                "GUEST": {
                                    "admin_channels": [
                                        "*"
                                    ],
                                    "all_channels": null,
                                    "name": ""
                                }
                            }
                        }
                    },
                    "Interface": "0.0.0.0:4984",
                    "log": [
                        "*"
                    ]
                }
                ```

              ### Load Balancing

              TODO
      - title: Extra Credit