requirements: |

  - Vagrant 1.8.1
  - Virtualbox

chapters:
  - title: Deploy
    lessons:
      - title: Spin Up & Install
        milestones:
          - title: Couchbase Server
            description: |

              To deploy Couchbase Mobile to production you must first get familiar with Couchbase Server. While it's certainly possible to run Sync Gateway in isolation for quick and agile development and testing, any production deployment needs Couchbase Server as the backend. Luckily, connecting the two is incredibly easy. Even more luckily, both Couchbase Server and Sync Gateway are designed to be able to scale out easily and with zero downtime, meaning that we can start with a very small deployment and scale it up later to something that's production ready.
              Couchbase Server can deployed on a whole host of [operating systems](http://www.couchbase.com/nosql-databases/downloads), but for this workshop we'll focus on using CentOS 7.

              ### Try it out

              1. You should already have [Vagrant](https://www.vagrantup.com/) installed, so simply navigate to the `deploy` directory and run the command `vagrant up`. You should get a fairly verbose output that starts by detailing the two machines we're about to bring up

              ```bash
              $ vagrant up
              Couchbase Server:       http://10.150.150.101:8091/
              Sync Gateway:           http://10.150.150.102:4984/
              Bringing machine 'node1-cb' up with 'virtualbox' provider...
              Bringing machine 'node2-sg' up with 'virtualbox' provider...
              ```

              1. You can make a note of the IP addresses in your output, but they should be the same as the ones above. As you might have guessed, we now have two VMs running - one with Couchbase Server and one with Sync Gateway. Let's check the Couchbase Server instance by going to the IP Address and port specified, you should be greeted with this screen:

                ![]()

              1. That's it, Couchbase Server is now running on this VM. We'll get into configuring it in a minute, but let's take a look at what we did under the covers so that you can replicate this with whatever provisioning tools you prefer (or manually, if you're a purist like that!).

                * The `Vagrantfile` deals with provisioning the VMs themselves. We use the `Vagrantfile` to do some basic processing of download links, but it doesn't actually use these itself; it's more concerned with spinning up the VMs, setting up hostnames and networking and so on. Essentially, when the `Vagrantfile` has done its thing, you're left with a certain number of "clean" VMs.

                * From here, `Puppet` takes over (and is actually kicked off by Vagrant). Puppet handles downloading the Couchbase Server package, and then installing this and making sure the service is running. It also does some other miscellaneous set up to ensure everything is ready to go. You can have a closer look at what's going on in the `cb_puppet.pp` file if you're interested.

                * If you're more than a little bit interested, check out our full repo of Vagrants at https://github.com/couchbaselabs/vagrants - these can be really handy when testing various configurations. It's worth noting though that although the repo is actively maintained, it's provided as-is and is not a supported product in it's own right. PRs are very welcome though!

          - title: Sync Gateway
            description: |
              Sync Gateway is the middleman server that exposes a database API for Couchbase Lite databases to replicate to and from. It connects internally to a Couchbase Server bucket to persist the documents. Again, in a production environment you would connect it to Couchbase Server, but for now let's have a quick look at the one we just started.

              1. We already started the VM in the last step, and in the same way `cb_puppet.pp` is used to install and start Couchbase Server, `sg_puppet.pp` was used for this VM to install and start Sync Gateway. We can check this easily either by using `curl`:

                ```bash
                $ curl http://10.150.150.102:4984/

                {"couchdb":"Welcome","vendor":{"name":"Couchbase Sync Gateway","version":1.4},"version":"Couchbase Sync Gateway/1.4.1(3;ddffd85)"}
                ```

              or by either opening the URL in a browser:

                ![](assets/welcome_wide.png)

              1. Although we still need to configure Sync Gateway to connect to Couchbase Server, it's already running with the default config. That includes an in memory (`walrus:`) database called `db`. We can have a quick play with this to confirm everything is working as expected.

                * First, check the database is really there:

                  ```bash
                  $ curl http://10.150.150.102:4984/db/

                  {"committed_update_seq":1,"compact_running":false,"db_name":"db","disk_format_version":0,"instance_start_time":1507203061736649,"purge_seq":0,"state":"Online","update_seq":1
                  ```

                * Now let's check the changes feed:

                  ```bash
                  $ curl http://10.150.150.102:4984/db/_changes

                  {"results":[
                  {"seq":1,"id":"_user/","changes":[{"rev":""}]}
                  ],
                  "last_seq":"1"}
                  ```

                * Not too much there yet, but we can easily add some documents:

                  ```bash
                  $ curl -X PUT http://10.150.150.102:4984/db/test_doc -d '{"I am a document": "with a specific name"}' -H 'Content-type: application/json'

                  {"id":"test_doc","ok":true,"rev":"1-838820c27155617e58bef130c14a844a"}
                  ```

                  ```bash
                  $ curl -X POST http://10.150.150.102:4984/db/ -d '{"I am a document": "without a specific name", "could I please have": "a UUID?"}'

                  {"id":"d6e43b47392ca2e7941744931c250f51","ok":true,"rev":"1-71abb654c47904d0965ff5f1f6fafa72"}
                  ```

                  ```bash
                  $ curl http://10.150.150.102:4984/db/_changes?include_docs=true

                  {"results":[
                  {"seq":1,"id":"_user/","changes":[{"rev":""}]}
                  ,{"seq":2,"id":"test_doc","doc":{"I am a document":"with a specific name","_id":"test_doc","_rev":"1-838820c27155617e58bef130c14a844a"},"changes":[{"rev":"1-838820c27155617e58bef130c14a844a"}]}
                  ,{"seq":3,"id":"d6e43b47392ca2e7941744931c250f51","doc":{"I am a document":"without a specific name","_id":"d6e43b47392ca2e7941744931c250f51","_rev":"1-71abb654c47904d0965ff5f1f6fafa72","could I please have":"a UUID?"},"changes":[{"rev":"1-71abb654c47904d0965ff5f1f6fafa72"}]}
                  ],
                  "last_seq":"3"}
                  ```

              1. You'll notice that Sync Gateway's Admin Port (`4985`) isn't accessible:

                ```bash
                $ curl http://10.150.150.102:4985
                curl: (7) Failed to connect to 10.150.150.102 port 4985: Connection refused
                ```

                This is because, by default, the port is only accessible from `localhost` - in this case the VM. Don't worry, we'll change that when we come to configure it to make life easier.

          - title: Reverse Proxy
            description: |
              # TODO
              With two Sync Gateway nodes you can now configure the reverse proxy and update the sync endpoint in the mobile app to start replications pointing to the reverse proxy instead of an individual Sync Gateway instance. In this example the NGINX instance will run on VM4.

              ### Try it out

              1. Log on VM4 (nginx).
              1. `cd deploy`
              1. Run the NGINX install script passing the IP of VM2 and VM3 where the Sync Gateway instances are running.

                  ```bash
                  sudo ./configure_nginx.sh VM2 VM3
                  ```

              1. Send an `/{db}/_all_docs` request with a user's credentials to the NGINX port. A user (**user1/pass**) is already defined in the Sync Gateway configuration file.

                  ```bash
                  curl -X GET 'http://user1:pass@localhost:8000/todo/_all_docs'
                  ```

                  ![](https://cl.ly/392N2E2K0J0T/image76.gif)
            tryitout:
              - TODO
      - title: Configure
        milestones:
          - title: Configuring Couchbase Server
            description: |
              Now that we've got a VM running Couchbase Server, we need to configure it. There are a few options here, we can use the UI, the [REST API](), or the [CLI](). Let's start by looking at the UI as it gives a good sense of what we're doing and why.

              ## Configuring Couchbase Server using the UI
              1. Open the UI in a browser - this should be at http://10.150.150.101:8091/ - and select *Setup New Cluster*

                ![](assets/welcome_focus.png)

              1. The next step is pretty self explainatory. You don't need to worry too much about the cluster name, but we'll be needed the credentials later. All the examples here are going to use `Administrator` and `password`, so use these yourself if you want to be able to copy and paste. If you're using Couchbase Mobile for anything more sensitive than this workshop, maybe try something a bit more secure!

                ![](assets/cluster_init.png)

              1. For the next step, you'll need to accept the Terms and Conditions, and then click *Configure Disk, Memory, Services* (we don't want the defaults in this case).

                ![](assets/terms_conditions.png)

              1. On this page, the only things we need to do are to diable the Index, Search, and Query Services. We don't need them for now, but there's always the opportunity to add them to the cluster later. Everything else is fine as it is - hit *Save & Finish*.

                ![](assets/node_init.png)

              1. Welcome to the Couchbase Server UI! You can see at the moment we have one node running the Data Service, and not much else going on - so let's add a bucket. Click *Buckets* on the left hand bar, then *ADD BUCKET* in the top right corner. In this case, we'll call our bucket `todo` and stick with the defaults for everything else. You can of course pick a different name for your bucket, but be aware that some of the examples in later lessons may need tweaking to match.

                ![](assets/main_ui.png)

                ![](assets/bucket_init.png)

              1. With the bucket created, the last bit of configuration we need to do on the Couchbase Server side is to create a user that Sync Gateway will authenticate with. That might sound like a bit of a strange concept - this isn't front end user, it's just going to be used by Sync Gateway itself. Starting in Couchbase Server 5.0, [Role Based Access Control]() is used to control access to all features and functions of the cluster, Sync Gateway therefore needs to authenticate against Couchbase Server just like any other client would. Click *Security* in the left hand bar, then *ADD USER* in the top right corner. We want to use `Couchbase` as the *Authenication Domain* in this workshop. As with the Administrator credentials, you can pick anything here, but if you want to copy and paste the credentials we will be using are `sg_user` and `rb4c_p4ssw0rd`.

                ![](assets/rbac_user.png)

              1. As for the roles themselves, we want to give `sg_user` the *Bucket Full Access* role for the `todo` bucket.

                ![](assets/rbac_role.png)

          - title: Configuring Sync Gateway
            description: |


      - title: Scale
        milestones:
          - title: Scaling Sync Gateway
            description: |
              ## Architecture

              In this lesson you will deploy a 3rd Sync Gateway node behind the reverse proxy.

              ![](img/image80.png)

              ## Scaling Sync Gateway

              Similarly to previous lessons you will first deploy Sync Gateway with the configuration file passing the IP of the VM running Couchbase Server.

              There will be 3 Sync Gateway nodes but the reverse proxy is forwarding the load to only 2 of them. To balance the traffic across all 3 you must update the NGINX config file with the IP of VM5.

              ### Try it out

              1. Log on VM5 (sync-gateway).
              1. `cd deploy`
              1. Run the Sync Gateway install latest script passing the IP of VM1 where Couchbase Server is running.

                  ```bash
                  sudo ./install_latest_sync_gateway.sh VM1
                  ```

              1. Log on VM4 (nginx).
              1. Run the NGINX install script passing the IP of VM2, VM3 and VM4 where the Sync Gateway instances are running.

                  ```bash
                  sudo ./configure_nginx.sh VM2 VM3 VM5
                  ```

              1. Send a curl request to http://localhost:8000. This will return information about the running sync_gateway behind the reverse proxy.

                  ```bash
                  curl localhost:8000
                  ```

                  ![](https://cl.ly/392N2E2K0J0T/image76.gif)

              ## Conclusion

              Well done! You've completed this lesson on scaling. Feel free to share your feedback, findings or ask any questions on the forums.
            tryitout:
              - TODO
  - title: Troubleshooting
      lessons:
        - title: Troubleshooting
          milestones:
            - title: TODO
              description: |
                TODO
              tryitout:
                - TODO
